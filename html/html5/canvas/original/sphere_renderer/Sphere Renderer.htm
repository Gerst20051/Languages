<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Sphere Renderer</title>
<style>
body, html {height: 100%;}
body {
	background-color: black;
	margin:0; padding:0;
	color: white;
}
#horizon {
	position: absolute;
	top: 50%;
	left: 0px;
	width: 100%;
	height: 1px;
	overflow: visible;
	visibility: visible;
	display: block
}
#content    
	{
	margin-left: -125px;
	position: relative;
	top: -100px;
	left: 50%;
	width: 200px;
	height: 200px;
	visibility: visible
	}

#content { position: relative; }
#imageTemp { position: absolute; top: 0px; left: 0px; }
</style>
<!--[if IE]><script src="excanvas.compiled.js"></script><![endif]-->
<script>
	var texture = "earth1024x1024.jpg";
	var param = { size: 200
					, tilt: 23
					, turn: 45
					, fpr : 128
					};

	var f = 30;	// Distance of the viewing area from the focal point.

	var frame_count = 10000;	// frame count, current angle of rotation. inc/dec to turn
	var gCanvas;	var gCtx;
	var gImage;		var gCtxImg;

	var fpr = 128;			// Number of frames for one complete rotation
	var fc=10000;		// frame count, current angle of rotation. inc/dec to turn
	
	var X=0;		// 
	var Y=1;		// Constants for indexing dimentions
	var Z=2;		//
	
	var v;			// vertical position on canvas
	var h;			// horizontal position on canvas

	var th;			// texture width
	var tv;			// texture height

	var hs=30;			// Horizontal scale of viewing area
	var vs=30;			// Vertical scale of viewing area

	// NB	The viewing area is an abstract rectangle in the 3d world and is not
	//	the same as the canvas used to display the image.

	var F = [0,0,0];	// Focal point of viewer
	var S = [0,30,0];	// Centre of sphere/planet

	var r=12;			// Radius of sphere/planet

	var f=30;	// Distance of the viewing area from the focal point. This seems
					// to give strange results if it is not equal to S[Y]. It should
					// theoreticaly be changable but hs & vs can still be used along
					// with r to change how large the sphere apears on the canvas.
					// HOWEVER, the values of hs, vs, S[Y], f & r MUST NOT BE TOO BIG
					// as this will result in overflow errors which are not traped
					// and do not crash the applet but will result in incorrect
					// displaying of the texture upon the sphere.

					/*
					 * There may be a solution to the above problem by finding L in
					 * a slightly different way.
					 * Since the problem is equivelent to finding the intersection
					 * in 2D space of a line and a circle then each view area pixel
					 * and associated vector can be used define a 2D plane in the 3D
					 * space that 'contains' the vector S-F which is the focal point
					 * to centre of the sphere.
					 *
					 * This is essentialy the same problem but I belive/hope it will
					 * not result in the same exact solution. I have hunch that the
					 * math will not result in such big numbers. Since this abstract
					 * plane will be spinning, it may be posilbe to use the symetry
					 * of the arange ment to reuse 1/4 of the calculations.
					 *
					 */

	var RX = 0,RY,RZ;		// Variables to hold rotations about the 3 axis
	var rx,ry,rz;		// Temp variables to hold them whilst rendering so
					// they won't get updated.
	var a;
	var b;
	var b2;			// b squared
	var bx=F[X]-S[X];	// = 0 for current values of F and S
	var by=F[Y]-S[Y];
	var bz=F[Z]-S[Z];	// = 0 for current values of F and S
	
	// c = Fx^2 + Sx^2 -2FxSx + Fy^2 + Sy^2 -2FySy + Fz^2 + Sz^2 -2FzSz - r^2
	// for current F and S this means c = Sy^2 - r^2
	
	var c=F[X]*F[X]+S[X]*S[X]+ F[Y]*F[Y]+S[Y]*S[Y] + F[Z]*F[Z]+S[Z]*S[Z]
							- 2*(F[X]*S[X]+F[Y]*S[Y]+F[Z]*S[Z]) - r*r;

	var c4 = c*4;		// save a bit of time maybe during rendering
	
	var s;	

	var m1 = 0;
	//double m2 = 0;
	
	// The following are use to calculate the vector of the current pixel to be
	// drawn from the focus position F
	
	var hs_ch;				// horizontal scale divided by canvas width
	var vs_cv;				// vertical scale divided by canvas height
	var hhs = 0.5*hs;	// half horizontal scale
	var hvs = 0.5*vs;	// half vertical scale
	
	var V = new Array(3);	// vector for storing direction of each pixel from F
	var L = new Array(3);	// Location vector from S that pixel 'hits' sphere
	
	var VY2=f*f;			// V[Y] ^2  NB May change if F changes
	
	var div_fps;

	
	function renderFrame(){
		var d1 = new Date();

		// RX, RY & RZ may change part way through if the newR? meathods are called while
		// this meathod is running so put them in temp vars at render start.
		// They also need converting from degrees to radians
		rx=RX*Math.PI/180;
		ry=RY*Math.PI/180;
		rz=RZ*Math.PI/180;
		
	
		for(v=0;v<=size;v++){
			for(h=0;h<=size;h++){
				
				// Calculate vector from focus point (Origin, so can ignor) to pixel
				V[X]=(hs_ch*h)-hhs;

				// V[Y] always the same as view frame doesn't move
				V[Z]=(vs_cv*v)-hvs;
	
				// Vector (L) from S where m*V (m is an unknown scalar) intersects 
				// surface of sphere is as follows
				//
				// L = F + mV - S
				//
				// L and m are unknown so find magnitude of vectors as the magnitude
				// of L is the radius of the sphere
				//
				// |L| = |F + mV - S| = r
				//
				// Can be rearranged to form a quadratic 
				//
				// 0 = am^2 +bm + c
				//
				// and solved to find m, useing the following formula
				//              ___________
				// m = ( -b - \/(b^2) - 4ac ) /2a
				//
				// Where a, b and c are as in the code, I can't be bothered to show
				// the working out. The square root term is negative as only the 
				// closest intersection is wanted. The other solution to m would give
				// the intersection of the 'back' of the sphere.
				
				a=V[X]*V[X]+VY2+V[Z]*V[Z];
				
				
				s=(b2-a*c4);	// the square root term

				// if s is -ve then there are no solutions to m and the 
				// sphere is not visible on the current pixel on the canvas
				// so only draw a pixel if the sphere is visable
				// 0 is a special case as it is the 'edge' of the sphere as there
				// is only one solution. (I have never seen it happen though)
				// of the two solutions m1 & m2 the nearest is m1, m2 being the
				// far side of the sphere.
				
				if (s > 0) {			

					m1 = ((-b)-(Math.sqrt(s)))/(2*a);

					L[X]=m1*V[X];		//	bx+m1*V[X];
					L[Y]=by+(m1*V[Y]);
					L[Z]=m1*V[Z];		//	bz+m1*V[Z];

					// Do a couple of rotations on L
					
					var lx=L[X];
					L[X]=lx*Math.cos(rz)-L[Y]*Math.sin(rz);
					L[Y]=lx*Math.sin(rz)+L[Y]*Math.cos(rz);

					var lz;
					lz=L[Z];
					L[Z]=lz*Math.cos(ry)-L[Y]*Math.sin(ry);
					L[Y]=lz*Math.sin(ry)+L[Y]*Math.cos(ry);

					// Calculate the position that this location on the sphere
					// coresponds to on the texture

					var lh = Math.floor(((th* (((Math.atan2(L[Y],L[X])+Math.PI) / 
								(2*Math.PI))+((1.0/fpr)*fc)  ) ))%th);

					// %tv at end to get rid of south pole bug. probaly means that one
					// pixel may be a color from the opposite pole but as long as the
					// poles are the same color this won't be noticed.

					var lv = Math.floor(tv-1-(tv*(Math.acos(L[Z]/r)/Math.PI)%tv));

	           var idxB = ( h +  v * size) * 4;
	           var idxI = (lh + lv * th) * 4;
	
	           // Update the values of the pixel;
	           CanvasData.data[idxB + 0] = ImgCanvasData.data[idxI + 0];
	           CanvasData.data[idxB + 1] = ImgCanvasData.data[idxI + 1];
	           CanvasData.data[idxB + 2] = ImgCanvasData.data[idxI + 2];
	           CanvasData.data[idxB + 3] = 255;					

				}
			}
		}
		var d2 = new Date();
		rendtime += 1000 / ( d2.getTime() - d1.getTime() );

		// Turn. Increment/decrement to turn clockwise/anti-clockwise
		fc--;
		gCtx.putImageData(CanvasData, 0, 0, tv, th);
		if (0 == fc%5){
			div_fps.innerHTML = ("Fps:" +	rendtime/5).substring(0,8);
			rendtime = 0;
		}
	}
   var rendtime  = 0;

	var ImgCanvasData, CanvasData;
	function copyImageToBuffer(aImg)
	{
		gImage = document.createElement('canvas');
		tv = aImg.naturalWidth;
		th = aImg.naturalHeight;
		gImage.width = tv;
		gImage.height = th;
		
		gCtxImg = gImage.getContext("2d");
		gCtxImg.clearRect(0, 0, tv, th);
		gCtxImg.drawImage(aImg, 0, 0);
		ImgCanvasData = gCtxImg.getImageData(0, 0, tv, th);
		
		tvd2=tv/2.0;
		tvp1=tv+1;

		hs_ch = (hs / size);
		vs_cv = (vs / size);
		
		setInterval(renderFrame, 0);		
	}

	function createSphere(texture) {
		gCanvas = document.getElementById("sphere");
		size = Math.min(gCanvas.width, gCanvas.height);
		gCtx = gCanvas.getContext("2d");
//		gCanvas.addEventListener("mousedown", onMouseDown, false);

		CanvasData = gCtx.createImageData(size, size);

		ry=90+param.tilt;
		rz=180+param.turn;

		RY = (90-ry);
		RZ = (180-rz);


		hs_ch = (hs / size);
		vs_cv = (vs / size);

		V[Y]=f;

		b=(2*(-f*V[Y]));
		b2=Math.pow(b,2);



      var img = new Image();
      img.onload = function() {
        copyImageToBuffer(img);
      };
      img.setAttribute("src", texture);

	}

	function go() {
		div_fps = document.getElementById("fps");
		createSphere(texture);
	}
</script>
</head>
<body onload="go()">
	<div id="horizon">
		<div id="content">
			<canvas id="sphere" width="200" height="200">
				Sorry, your browser does not support the canvas element
			</canvas>
			<div id="fps"></div>
		</div> 
	</div> 
</body>
</html>
