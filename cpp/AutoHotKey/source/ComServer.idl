import "wtypes.idl";

[
    uuid(A9863C65-8CD4-4069-893D-3B5A3DDFAE88),
    version(1.0)
]
library LibCOMServer
{
	importlib("stdole32.tlb");
	importlib("stdole.tlb"); 

	[ uuid(04FFE41B-8FE9-4479-990A-B186EC73F49C),
	  dual,
	  oleautomation 
	]
	interface ICOMServer : IDispatch
	{
		[id(1)] HRESULT ahktextdll([in,optional] VARIANT script,[in,optional] VARIANT options,[in,optional] VARIANT params, [out, retval] unsigned int* hThread);
		[id(2)] HRESULT ahkdll([in,optional] VARIANT filepath,[in,optional] VARIANT options,[in,optional] VARIANT params, [out, retval] unsigned int* hThread);
		[id(3)] HRESULT ahkPause([in,optional] VARIANT aChangeTo,[out, retval] BOOL* paused);
		[id(4)] HRESULT ahkReady([out, retval] BOOL* ready);
		[id(5)] HRESULT ahkFindLabel([in] VARIANT aLabelName,[out, retval] unsigned int* pLabel);
		[id(6)] HRESULT ahkgetvar([in] VARIANT name,[in,optional] VARIANT getVar,[out, retval] VARIANT *returnVal);
		[id(7)] HRESULT ahkassign([in] VARIANT name,[in,optional] VARIANT value,[out, retval] unsigned int* success);
		[id(8)] HRESULT ahkExecuteLine([in,optional] VARIANT line,[in,optional] VARIANT aMode,[in,optional] VARIANT wait,[out, retval] unsigned int* pLine);
		[id(9)] HRESULT ahkLabel([in] VARIANT aLabelName,[in,optional] VARIANT nowait,[out, retval] BOOL* success);
		[id(10)] HRESULT ahkFindFunction([in] VARIANT FuncName,[out, retval] unsigned int* pFunc);
		[id(11)] HRESULT ahkFunction([in] VARIANT FuncName,[in,optional] VARIANT param1,[in,optional] VARIANT param2,[in,optional] VARIANT param3,[in,optional] VARIANT param4,[in,optional] VARIANT param5,[in,optional] VARIANT param6,[in,optional] VARIANT param7,[in,optional] VARIANT param8,[in,optional] VARIANT param9,[in,optional] VARIANT param10,[out, retval] VARIANT* returnVal);
		[id(12)] HRESULT ahkPostFunction([in] VARIANT FuncName,[in,optional] VARIANT param1,[in,optional] VARIANT param2,[in,optional] VARIANT param3,[in,optional] VARIANT param4,[in,optional] VARIANT param5,[in,optional] VARIANT param6,[in,optional] VARIANT param7,[in,optional] VARIANT param8,[in,optional] VARIANT param9,[in,optional] VARIANT param10,[out, retval] unsigned int* returnVal);
		[id(13)] HRESULT ahkKey([in] VARIANT name,[out, retval] BOOL* success);
		[id(14)] HRESULT addScript([in] VARIANT script,[in,optional] VARIANT replace,[out, retval] unsigned int* success);
		[id(15)] HRESULT addFile([in] VARIANT filepath,[in,optional] VARIANT aAllowDuplicateInclude,[in,optional] VARIANT aIgnoreLoadFailure,[out, retval] unsigned int* success);
		[id(16)] HRESULT ahkExec([in] VARIANT script,[out, retval] BOOL* success);
		[id(17)] HRESULT ahkTerminate([in,optional] VARIANT kill,[out, retval] BOOL* success);
	}

	[ uuid(C00BCC8C-5A04-4392-870F-20AAE1B926B2),
	  helpstring("AutoHotkey Script") 
	]
	coclass CoCOMServer
	{
		[default] interface ICOMServer;
	}
#ifdef _WIN64
	[ uuid(38D00012-DC83-4E17-9BAD-D9DD97902580),
	  helpstring("AutoHotkey Script X64") 
	]
	coclass CoCOMServerOptional
	{
		[default] interface ICOMServer;
	}
#else
#ifdef _UNICODE
	[ uuid(C58DCD96-1D6F-4F85-B555-02B7F21F5CAF),
	  helpstring("AutoHotkey Script UNICODE") 
	]
	coclass CoCOMServerOptional
	{
		[default] interface ICOMServer;
	}
#else
	[ uuid(974318D9-A5B2-4FE5-8AC4-33A0C9EBB8B5),
	  helpstring("AutoHotkey Script ANSI") 
	]
	coclass CoCOMServerOptional
	{
		[default] interface ICOMServer;
	}
#endif //Unicode
#endif //Win64
}
