#
# testing different DATETIME ranges
#

--disable_warnings
drop table if exists t1;
--enable_warnings

create table t1 (t datetime, pk int auto_increment primary key);
insert into t1 (t) values (101);
insert into t1 (t) values (691231);
insert into t1 (t) values (700101);
insert into t1 (t) values (991231);
insert into t1 (t) values (10000101);
insert into t1 (t) values (99991231);
insert into t1 (t) values (101000000);
insert into t1 (t) values (691231000000);
insert into t1 (t) values (700101000000);
insert into t1 (t) values (991231235959);
insert into t1 (t) values (10000101000000);
insert into t1 (t) values (99991231235959);
--error ER_INVALID_DATETIME_VALUE # Bad datetime
insert into t1 (t) values (20030100000000);
--error ER_INVALID_DATETIME_VALUE # Bad datetime
insert into t1 (t) values (20030000000000);
select t from t1;
--error ER_INVALID_DATETIME_VALUE # Bad datetime
delete from t1 where t > 0;
# try earliest datetime end point which is actually a friggin datetime, not a 0.
delete from t1 where t > "0001-01-01 00:00:00";
alter table t1 engine="default";
check table t1;
delete from t1;
insert into t1 (t) values("000101");
insert into t1 (t) values("691231");
insert into t1 (t) values("700101");
insert into t1 (t) values("991231");
--error ER_INVALID_DATETIME_VALUE # Bad datetime
insert into t1 (t) values("00000101");
insert into t1 (t) values("00010101");
insert into t1 (t) values("99991231");
--error ER_INVALID_DATETIME_VALUE # Bad datetime
insert into t1 (t) values("00101000000");
--error ER_INVALID_DATETIME_VALUE # Bad datetime
insert into t1 (t) values("691231000000");
--error ER_INVALID_DATETIME_VALUE # Bad datetime
insert into t1 (t) values("700101000000");
--error ER_INVALID_DATETIME_VALUE # Bad datetime
insert into t1 (t) values("991231235959");
insert into t1 (t) values("10000101000000");
insert into t1 (t) values("99991231235959");
--error ER_INVALID_DATETIME_VALUE # Bad datetime
insert into t1 (t) values("20030100000000");
--error ER_INVALID_DATETIME_VALUE # Bad datetime
insert into t1 (t) values("20030000000000");

# Strange dates
--error ER_INVALID_DATETIME_VALUE # Bad datetime
insert into t1 (t) values ("2003-003-03");

# Bug #7308: ISO-8601 date format not handled correctly
--error ER_INVALID_DATETIME_VALUE # Bad datetime
insert into t1 (t) values ("20030102T131415");
insert into t1 (t) values ("2001-01-01T01:01:01");
--error ER_INVALID_DATETIME_VALUE # Bad datetime
insert into t1 (t) values ("2001-1-1T1:01:01");
select t from t1;

# Test some wrong dates
truncate table t1;
--error ER_INVALID_DATETIME_VALUE # Bad datetime
insert into t1 (t) values("2003-0303 12:13:14");
select t from t1;
drop table t1;

#
# Test of datetime and not null
#

CREATE TABLE t1 (a datetime not null primary key);
insert into t1 values ("2009-02-11 00:00:00");
select * from t1 where a is null;
drop table t1;

#
# Test with bug when propagating DATETIME to integer and WHERE optimization
#

create table t1 (id int primary key, dt datetime);
insert into t1 values (1,"2001-08-14 00:00:00"),(2,"2001-08-15 00:00:00"),(3,"2001-08-16 00:00:00"),(4,"2003-09-15 01:20:30");
select * from t1 where dt='2001-08-14 00:00:00' and dt =  if(id=1,'2001-08-14 00:00:00','1999-08-15');
create index dt on t1 (dt);
select * from t1 where dt > 20021020;
select * from t1 ignore index (dt) where dt > 20021020;
drop table t1;

#
# Test of datetime optimization
#

CREATE TEMPORARY TABLE `t1` (
  `date` datetime,
  `numfacture` int NOT NULL default '0',
  `expedition` datetime,
  PRIMARY KEY  (`numfacture`),
  KEY `date` (`date`),
  KEY `expedition` (`expedition`)
) ENGINE=MyISAM;

INSERT INTO t1 (expedition) VALUES ('0001-01-01 00:00:00');
SELECT * FROM t1 WHERE expedition='0001-01-01 00:00:00';
INSERT INTO t1 (numfacture,expedition) VALUES ('1212','0001-01-01 00:00:00');
SELECT * FROM t1 WHERE expedition='0001-01-01 00:00:00';
--replace_column 9 #
EXPLAIN SELECT * FROM t1 WHERE expedition='0001-01-01 00:00:00';
drop table t1;
create table t1 (a datetime not null, b datetime not null, pk int auto_increment primary key);
insert into t1 (a,b) values (now(), now());
insert into t1 (a,b) values (now(), now());
select a,b from t1 where a is null or b is null;
drop table t1;

#
# Let us check if we properly treat wrong datetimes and produce proper
# warnings (for both strings and numbers)
#
create table t1 (t datetime primary key);
--error ER_INVALID_DATETIME_VALUE # Bad datetime
insert into t1 values (20030102030460),(20030102036301),(20030102240401),
                      (20030132030401),(20031302030401),(100001202030401);
select * from t1;
delete from t1;
--error ER_INVALID_DATETIME_VALUE # Bad datetime
insert into t1 values
  ("2003-01-02 03:04:60"),("2003-01-02 03:63:01"),("2003-01-02 24:04:01"),
  ("2003-01-32 03:04:01"),("2003-13-02 03:04:01"), ("10000-12-02 03:04:00");
select * from t1;
delete from t1;
--error ER_INVALID_DATETIME_VALUE # Bad datetime
insert into t1 values ("0000-00-00 00:00:00 some trailer"),("2003-01-01 00:00:00 some trailer");
select * from t1 order by t;
drop table t1;

#
# Test for bug #7297 "Two digit year should be interpreted correctly even
# with zero month and day"
#
create table t1 (dt datetime primary key);
# These dates should be treated as dates in 21st century
insert into t1 values ("12-01-01"), ("01-01-01 01:00:00");
# Zero dates are still special :/
--error ER_INVALID_DATETIME_VALUE # Yeah special uh no its wrong
insert into t1 values ("00-00-00"), ("00-00-00 00:00:00");
select * from t1;
drop table t1;

#
# Bug #16546 DATETIME+0 not always coerced the same way 
#
select cast('2006-12-05 22:10:10' as datetime) + 0;


# End of 4.1 tests

#
# Bug#21475: Wrongly applied constant propagation leads to a false comparison.
#
CREATE TABLE t1(a DATETIME NOT NULL primary key);
INSERT INTO t1 VALUES ('20060606155555');
SELECT a FROM t1 WHERE a=(SELECT MAX(a) FROM t1) AND (a="20060606155555");
DROP TABLE t1;


#
# Bug 19491 (CAST DATE AS DECIMAL returns incorrect result
#
SELECT CAST(CAST('2006-08-10' AS DATE) AS DECIMAL(20,6));
SELECT CAST(CAST('2006-08-10 10:11:12' AS DATETIME) AS DECIMAL(20,6));
SELECT CAST(CAST('2006-08-10 10:11:12' AS DATETIME) + INTERVAL 14 MICROSECOND AS DECIMAL(20,6));


#
# Test of storing datetime into date fields
#

create table t1 (da date default '1962-03-03 23:33:34', dt datetime default '1962-03-03', pk int primary key auto_increment);
--replace_regex /ENGINE=[a-zA-Z]+/ENGINE=DEFAULT/
show create table t1;
insert into t1 values ();
insert into t1 (da, dt) values ('2007-03-23 13:49:38','2007-03-23 13:49:38');
insert into t1 (da, dt) values ('2007-03-23 13:49:38','2007-03-23 13:49:38');
insert into t1 set dt='2007-03-23 13:49:38',da=dt;
# Test error handling
--error ER_INVALID_DATE_VALUE # Bad date
insert into t1 (da, dt) values ('2007-03-32','2007-03-23 13:49:38');
select da,dt from t1;
drop table t1;
--error ER_INVALID_DATETIME_VALUE # Bad datetime
create table t1 (da date default '1962-03-32 23:33:34', dt datetime default '1962-03-03', pk int auto_increment primary key);


#
# Bug#16377: Wrong DATE/DATETIME comparison in BETWEEN function.
#
create table t1 (f1 date, f2 datetime, f3 timestamp, primary key (f1,f2));
insert into t1 values('2001-01-01','2001-01-01 01:01:01','2001-01-01 01:01:01');
insert into t1 values('2001-02-05','2001-02-05 00:00:00','2001-02-05 01:01:01');
insert into t1 values('2001-03-10','2001-03-09 01:01:01','2001-03-10 01:01:01');
insert into t1 values('2001-04-15','2001-04-15 00:00:00','2001-04-15 00:00:00');
insert into t1 values('2001-05-20','2001-05-20 01:01:01','2001-05-20 01:01:01');
select f2 from t1 where f2 between '2001-2-5' and '01-04-14';
select f1, f2, f3 from t1 where f1 between f2 and f3;
select f1, f2, f3 from t1 where cast(f1 as datetime) between f2 and
  cast(f3 as date);
select f2 from t1 where '2001-04-10 12:34:56' between f2 and '01-05-01';
select f2, f3 from t1 where '01-03-10' between f2 and f3;
select f2 from t1 where DATE(f2) between "2001-4-15" AND "01-4-15";
drop table t1;

#
# Bug#28133: Wrong DATE/DATETIME comparison in IN() function.
#
create table t1 (f1 date primary key);
insert into t1 values('01-01-01'),('01-01-02'),('01-01-03');
select * from t1 where f1 in ('01-01-01','2001-01-02','2001-01-03 00:00:00');
create table t2(f2 datetime primary key);
insert into t2 values('01-01-01 00:00:00'),('01-02-03 12:34:56'),('02-04-06 11:22:33');
select * from t2 where f2 in ('01-01-01','01-02-03 12:34:56','01-02-03');
select * from t1,t2 where '01-01-02' in (f1, cast(f2 as date));
select * from t1,t2 where '01-01-01' in (f1, '01-02-03');
select * from t1,t2 where if(1,'01-02-03 12:34:56','') in (f1, f2);
create table t3(f3 varchar(20) primary key);
insert into t3 select * from t2;
select * from t2,t3 where f2 in (f3,'03-04-05');
select f1,f2,f3 from t1,t2,t3 where (f1,'1') in ((f2,'1'),(f3,'1'));
select f1 from t1 where ('1',f1) in (('1','01-01-01'),('1','2001-1-1 0:0:0'),('1','02-02-02'));
drop table t1,t2,t3;

#
# Bug#27759: Wrong DATE/DATETIME comparison in LEAST()/GREATEST() functions.
#
select least(cast('01-01-01' as date), '01-01-02');
select greatest(cast('01-01-01' as date), '01-01-02');
select least(cast('01-01-01' as date), '01-01-02') + 0;
select greatest(cast('01-01-01' as date), '01-01-02') + 0;
select least(cast('01-01-01' as datetime), '01-01-02') + 0;
select cast(least(cast('01-01-01' as datetime), '01-01-02') as decimal(16,2));
#
#
# Bug#28208: Wrong result of a non-const STRING function with a const
#            DATETIME function.
#
create table t1 (f1 date primary key);
insert into t1 values (curdate());
select left(f1,10) = curdate() from t1;
drop table t1;

#
# Bug#28261: Wrong DATETIME comparison result when the GET_USER_VAR function
#            is involved.
#
create table t1(f1 date, pk int auto_increment primary key);
insert into t1 (f1) values('01-01-01'),('02-02-02'),('01-01-01'),('02-02-02');
set @bug28261='';
select if(@bug28261 = f1, '', @bug28261:= f1) from t1;
select if(@bug28261 = f1, '', @bug28261:= f1) from t1;
select if(@bug28261 = f1, '', @bug28261:= f1) from t1;
drop table t1;

#
# Bug#28778: Wrong result of BETWEEN when comparing a DATETIME field with an
#            integer constants.
#
create table t1(f1 datetime primary key);
insert into t1 values('2001-01-01'),('2002-02-02');
select * from t1 where f1 between 20020101 and 20070101000000;
--error ER_INVALID_DATETIME_VALUE # 2002010 is not a datetime.
select * from t1 where f1 between 2002010 and 20070101000000;
--error ER_INVALID_DATETIME_VALUE # 2007010100000 is not a datetime.
select * from t1 where f1 between 20020101 and 2007010100000;
drop table t1;

#
# Bug #31249: problem with convert(..., datetime)
#
create table t1 (a int, pk int primary key auto_increment);
insert into t1 values (), (), ();
select sum(a) from t1 group by convert(a, datetime);
drop table t1;

#
# Bug #32694: NOT NULL table field in a subquery produces invalid results
#
create table t1 (id int not null primary key, cur_date datetime not null);
create table t2 (id int not null primary key, cur_date date not null);
insert into t1 (id, cur_date) values (1, '2007-04-25 18:30:22');
insert into t2 (id, cur_date) values (1, '2007-04-25');

--replace_column 9 #
explain extended
select * from t2
where id in (select id from t2 as x1 where (t2.cur_date is null));
select * from t2
where id in (select id from t2 as x1 where (t2.cur_date is null));

insert into t1 (id, cur_date) values (2, '2007-04-26 18:30:22');
insert into t2 (id, cur_date) values (2, '2007-04-26');

--replace_column 9 #
explain extended
select * from t1
where id in (select id from t1 as x1 where (t1.cur_date is null));
select * from t1
where id in (select id from t1 as x1 where (t1.cur_date is null));

--replace_column 9 #
explain extended
select * from t2
where id in (select id from t2 as x1 where (t2.cur_date is null));
select * from t2
where id in (select id from t2 as x1 where (t2.cur_date is null));
drop table t1,t2;

--echo End of 5.0 tests
#
# Test of storing datetime into date fields
#

create table t1 (da date default '1962-03-03 23:33:34', dt datetime default '1962-03-03', pk int auto_increment primary key);
--replace_regex /ENGINE=[a-zA-Z]+/ENGINE=DEFAULT/
show create table t1;
insert into t1 values ();
insert into t1 (da, dt) values ('2007-03-23 13:49:38','2007-03-23 13:49:38');
insert into t1 (da, dt) values ('2007-03-23 13:49:38','2007-03-23 13:49:38');
insert into t1 set dt='2007-03-23 13:49:38',da=dt;
# Test error handling
--error ER_INVALID_DATE_VALUE # Bad date
insert into t1 (da, dt) values ('2007-03-32','2007-03-23 13:49:38');
select da,dt from t1;
drop table t1;
--error ER_INVALID_DATETIME_VALUE # Bad date
create table t1 (da date default '1962-03-32 23:33:34', dt datetime default '1962-03-03' primary key);
