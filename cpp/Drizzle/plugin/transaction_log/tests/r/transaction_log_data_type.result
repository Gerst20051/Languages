DROP TABLE IF EXISTS t1;
++ Begin INT tests ++ 
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (a INT NOT NULL AUTO_INCREMENT, b INT, PRIMARY KEY(a));
Testing MIN INT
INSERT INTO t1 (b) VALUES(-2147483648);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "-2147483648"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MAX INT
INSERT INTO t1 (b) VALUES(2147483647);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "2147483647"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MIN-1 INT
INSERT INTO t1 (b) VALUES(-2147483649);
ERROR 22003: Out of range value for column 'b' at row 1
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "2147483647"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MAX+1 INT
INSERT INTO t1 (b) VALUES(2147483648);
ERROR 22003: Out of range value for column 'b' at row 1
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "2147483647"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing NULL INT
INSERT INTO t1 (b) VALUES(NULL);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "3"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing BAD INPUT INT1
INSERT INTO t1 (b) VALUES('abbazabba');
ERROR HY000: Incorrect integer value: 'abbazabba' for column 'b' at row 1
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "3"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing BAD INPUT INT2
INSERT INTO t1 (b) VALUES('a');
ERROR HY000: Incorrect integer value: 'a' for column 'b' at row 1
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "3"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MULTI_INSERT INT
INSERT INTO t1 (b) VALUES(1),(1),(2),(3),(5);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
5

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
5
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "4"
      insert_value: "1"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "5"
      insert_value: "1"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "6"
      insert_value: "2"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "7"
      insert_value: "3"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "8"
      insert_value: "5"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;
++ End INT tests ++
++ Begin BIGINT tests ++
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (a INT NOT NULL AUTO_INCREMENT, b BIGINT, PRIMARY KEY(a));
Testing MIN BIGINT
INSERT INTO t1 (b) VALUES(-9223372036854775808);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: BIGINT
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "-9223372036854775808"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MAX BIGINT
INSERT INTO t1 (b) VALUES(9223372036854775807);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: BIGINT
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "9223372036854775807"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MIN-1 BIGINT
INSERT INTO t1 (b) VALUES(-9223372036854775809);
ERROR 22003: Out of range value for column 'b' at row 1
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: BIGINT
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "9223372036854775807"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MAX+1 BIGINT
NOTE: Bug#316221 - 2**63 incorrectly inserted into bigint
INSERT INTO t1 (b) VALUES(9223372036854775808);
ERROR 22003: Out of range value for column 'b' at row 1
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: BIGINT
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "9223372036854775807"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing NULL BIGINT
INSERT INTO t1 (b) VALUES(NULL);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: BIGINT
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "3"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing BAD INPUT BIGINT1
INSERT INTO t1 (b) VALUES('abbazabba');
ERROR HY000: Incorrect integer value: 'abbazabba' for column 'b' at row 1
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: BIGINT
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "3"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing BAD INPUT BIGINT2
INSERT INTO t1 (b) VALUES('a');
ERROR HY000: Incorrect integer value: 'a' for column 'b' at row 1
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: BIGINT
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "3"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

++ End BIGINT tests ++
++ Begin DECIMAL simple tests ++
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (a INT NOT NULL AUTO_INCREMENT, b DECIMAL(5,2), PRIMARY KEY(a));
Testing MIN DECIMAL simple 
INSERT INTO t1 (b) VALUES(-999.99);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DECIMAL
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "-999.99"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MAX DECIMAL simple 
INSERT INTO t1 (b) VALUES(999.99);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DECIMAL
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "999.99"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MIN-1 DECIMAL simple 
INSERT INTO t1 (b) VALUES(-1000);
ERROR 22003: Out of range value for column 'b' at row 1
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DECIMAL
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "999.99"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MAX+1 DECIMAL simple 
INSERT INTO t1 (b) VALUES(1000);
ERROR 22003: Out of range value for column 'b' at row 1
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DECIMAL
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "999.99"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing NULL DECIMAL simple 
INSERT INTO t1 (b) VALUES(NULL);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DECIMAL
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "3"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing BAD INPUT DECIMAL simple 
INSERT INTO t1 (b) VALUES('abbazabba');
ERROR HY000: Incorrect decimal value: 'abbazabba' for column 'b' at row 1
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DECIMAL
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "3"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing BAD INPUT DECIMAL simple2 
INSERT INTO t1 (b) VALUES('a');
ERROR HY000: Incorrect decimal value: 'a' for column 'b' at row 1
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DECIMAL
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "3"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing misc DECIMAL simple
INSERT INTO t1 (b) VALUES(100);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
5

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
5
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DECIMAL
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "4"
      insert_value: "100.00"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing misc DECIMAL simple2
INSERT INTO t1 (b) VALUES(.0898);
ERROR 01000: Data truncated for column 'b' at row 1
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
5

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
5
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DECIMAL
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "4"
      insert_value: "100.00"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing misc DECIMAL simple3
INSERT INTO t1 (b) VALUES(.1);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
6

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
6
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DECIMAL
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "5"
      insert_value: "0.10"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

++ End DECIMAL simple tests ++
++ Begin FLOAT simple tests ++
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (a INT NOT NULL AUTO_INCREMENT, b FLOAT(5,2), PRIMARY KEY(a));
Testing MIN FLOAT simple
INSERT INTO t1 (b) VALUES(-999.99);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DOUBLE
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "-999.99"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MAX FLOAT simple
INSERT INTO t1 (b) VALUES(999.99);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DOUBLE
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "999.99"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MIN-1 FLOAT simple
INSERT INTO t1 (b) VALUES(-1000);
ERROR 22003: Out of range value for column 'b' at row 1
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DOUBLE
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "999.99"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MAX+1 FLOAT simple
INSERT INTO t1 (b) VALUES(1000);
ERROR 22003: Out of range value for column 'b' at row 1
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DOUBLE
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "999.99"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing NULL FLOAT simple
INSERT INTO t1 (b) VALUES(NULL);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DOUBLE
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "3"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing BAD INPUT FLOAT simple
INSERT INTO t1 (b) VALUES('abbazabba');
ERROR 01000: Data truncated for column 'b' at row 1
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DOUBLE
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "3"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

++ End FLOAT simple tests ++
++ Begin CHAR simple tests ++
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (a INT NOT NULL AUTO_INCREMENT, b CHAR(10), PRIMARY KEY(a));
Testing MIN CHAR simple
INSERT INTO t1 (b) VALUES("");
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: VARCHAR
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: ""
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MAX CHAR simple
INSERT INTO t1 (b) VALUES("zzzzzzzzzz");
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: VARCHAR
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "zzzzzzzzzz"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MAX+1 CHAR simple
INSERT INTO t1 (b) VALUES('zzzzzzzzzzz');
ERROR 22001: Data too long for column 'b' at row 1
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: VARCHAR
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "zzzzzzzzzz"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing NULL CHAR simple
INSERT INTO t1 (b) VALUES(NULL);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: VARCHAR
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "3"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing NUMERIC INPUT CHAR simple
INSERT INTO t1 (b) VALUES(1000000);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
5

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
5
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: VARCHAR
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "4"
      insert_value: "1000000"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

++ End CHAR simple tests ++
++ Begin ENUM simple tests ++
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (a INT NOT NULL AUTO_INCREMENT, b ENUM('1','2','3','4','5'), PRIMARY KEY(a));
Testing MIN ENUM simple
INSERT INTO t1 (b) VALUES(1);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: ENUM
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "1"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MAX ENUM simple
INSERT INTO t1 (b) VALUES(5);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: ENUM
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "5"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing BAD INPUT ENUM simple
INSERT INTO t1 (b) VALUES(6);
ERROR HY000: Received an invalid enum value '6'.
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: ENUM
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "5"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing NULL ENUM simple
INSERT INTO t1 (b) VALUES(NULL);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: ENUM
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "3"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

++ End ENUM simple tests ++
++ Begin DATE tests ++
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (a INT NOT NULL AUTO_INCREMENT, b DATE, PRIMARY KEY(a));
Testing MIN DATE
INSERT INTO t1 (b) VALUES('0001-01-01');
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DATE
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "0001-01-01"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MAX DATE
INSERT INTO t1 (b) VALUES('9999-12-31');
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DATE
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "9999-12-31"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MIN-1 DATE
INSERT INTO t1 (b) VALUES('0000-12-31');
ERROR HY000: Received an invalid DATE value '0000-12-31'.
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DATE
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "9999-12-31"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MAX+1 DATE
INSERT INTO t1 (b) VALUES('10000-01-01');
ERROR HY000: Received an invalid DATE value '10000-01-01'.
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DATE
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "9999-12-31"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing Alternate input format DATE1
INSERT INTO t1 (b) VALUES('20000101');
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DATE
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "3"
      insert_value: "2000-01-01"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing Alternate input formate DATE2
INSERT INTO t1 (b) VALUES('990601');
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
5

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
5
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DATE
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "4"
      insert_value: "1999-06-01"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing NULL DATE
INSERT INTO t1 (b) VALUES(NULL);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
6

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
6
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DATE
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "5"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing BAD INPUT DATE1
INSERT INTO t1 (b) VALUES('abbazabba');
ERROR HY000: Received an invalid DATE value 'abbazabba'.
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
6

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
6
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DATE
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "5"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing BAD INPUT DATE2
INSERT INTO t1 (b) VALUES('a');
ERROR HY000: Received an invalid DATE value 'a'.
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
6

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
6
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DATE
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "5"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

++ End DATE tests ++
++ Begin DATETIME tests ++
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (a INT NOT NULL AUTO_INCREMENT, b DATETIME, PRIMARY KEY(a));
Testing MIN DATETIME
INSERT INTO t1 (b) VALUES('0001-01-01 00:00:00');
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DATETIME
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "0001-01-01 00:00:00"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MAX DATETIME
INSERT INTO t1 (b) VALUES('9999-12-31 23:59:59');
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DATETIME
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "9999-12-31 23:59:59"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MIN-1 DATETIME
INSERT INTO t1 (b) VALUES('0000-01-01');
ERROR HY000: Received an invalid datetime value '0000-01-01'.
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DATETIME
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "9999-12-31 23:59:59"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MAX+1 DATETIME
INSERT INTO t1 (b) VALUES('10000-01-01');
ERROR HY000: Received an invalid datetime value '10000-01-01'.
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DATETIME
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "9999-12-31 23:59:59"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing Alternate input format DATETIME1
INSERT INTO t1 (b) VALUES(20000101121559);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DATETIME
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "3"
      insert_value: "2000-01-01 12:15:59"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing Alternate input formate DATETIME2
INSERT INTO t1 (b) VALUES('19990601121547');
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
5

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
5
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DATETIME
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "4"
      insert_value: "1999-06-01 12:15:47"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing NULL DATETIME
INSERT INTO t1 (b) VALUES(NULL);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
6

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
6
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DATETIME
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "5"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing BAD INPUT DATETIME1
INSERT INTO t1 (b) VALUES('2000-01-01 25:00:00');
ERROR HY000: Received an invalid datetime value '2000-01-01 25:00:00'.
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
6

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
6
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DATETIME
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "5"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing BAD INPUT DATETIME2
INSERT INTO t1 (b) VALUES('2000-01-01 12:60:00');
ERROR HY000: Received an invalid datetime value '2000-01-01 12:60:00'.
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
6

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
6
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DATETIME
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "5"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing BAD INPUT DATETIME3
INSERT INTO t1 (b) VALUES('2000-01-01 12:00:70');
ERROR HY000: Received an invalid datetime value '2000-01-01 12:00:70'.
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
6

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
6
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DATETIME
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "5"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

++ End DATETIME tests ++
++ Begin TIMESTAMP tests ++
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (a INT NOT NULL AUTO_INCREMENT, b TIMESTAMP, PRIMARY KEY(a));
Testing MIN TIMESTAMP
INSERT INTO t1 (b) VALUES('1970-01-01 00:00:00');
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: EPOCH
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "1970-01-01 00:00:00"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MAX TIMESTAMP
INSERT INTO t1 (b) VALUES('2038-01-19 03:14:07');
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: EPOCH
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "2038-01-19 03:14:07"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MIN-1 TIMESTAMP
INSERT INTO t1 (b) VALUES('1969-12-31 23:59:59');
ERROR HY000: Received an invalid timestamp value '1969-12-31 23:59:59'.
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: EPOCH
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "2038-01-19 03:14:07"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MAX+1 TIMESTAMP
INSERT INTO t1 (b) VALUES('2038-01-19 03:14:08');
ERROR HY000: Received an invalid timestamp value '2038-01-19 03:14:08'.
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: EPOCH
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "2038-01-19 03:14:07"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing Alternate input format TIMESTAMP1
INSERT INTO t1 (b) VALUES(20000101121559);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: EPOCH
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "3"
      insert_value: "2000-01-01 12:15:59"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing Alternate input formate TIMESTAMP2
INSERT INTO t1 (b) VALUES(19990601121547);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
5

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
5
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: EPOCH
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "4"
      insert_value: "1999-06-01 12:15:47"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing NULL TIMESTAMP
INSERT INTO t1 (b) VALUES(NULL);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
6

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
6
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: EPOCH
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "5"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing BAD INPUT TIMESTAMP1
INSERT INTO t1 (b) VALUES('2000-01-01 25:00:00');
ERROR HY000: Received an invalid timestamp value '2000-01-01 25:00:00'.
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
6

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
6
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: EPOCH
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "5"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing BAD INPUT TIMESTAMP2
INSERT INTO t1 (b) VALUES('2000-01-01 12:60:00');
ERROR HY000: Received an invalid timestamp value '2000-01-01 12:60:00'.
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
6

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
6
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: EPOCH
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "5"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing BAD INPUT TIMESTAMP3
INSERT INTO t1 (b) VALUES('2000-01-01 12:00:65');
ERROR HY000: Received an invalid timestamp value '2000-01-01 12:00:65'.
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
6

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
6
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: EPOCH
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "5"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

++ End TIMESTAMP tests ++
++ Begin BLOB simple tests ++
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (a INT NOT NULL AUTO_INCREMENT, b BLOB, PRIMARY KEY(a));
Testing BLOB simple1
INSERT INTO t1 (b) VALUES("This is a string that will go into a BLOB column.  Let's see how it works");
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: BLOB
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "This is a string that will go into a BLOB column.  Let\'s see how it works"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing BLOB simple2
INSERT INTO t1 (b) VALUES("this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string");
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: BLOB
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string this_is_a_longish_string"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing NULL BLOB simple
INSERT INTO t1 (b) VALUES(NULL);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: BLOB
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "3"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing INPUT BLOB simple1
INSERT INTO t1 (b) VALUES(100);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
5

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
5
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: BLOB
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "4"
      insert_value: "100"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing INPUT BLOB simple2
INSERT INTO t1 (b) VALUES("");
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
6

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
6
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: BLOB
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "5"
      insert_value: ""
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing INPUT BLOB simple3
INSERT INTO t1 (b) VALUES('2000-01-01 12:00:70');
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
7

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
7
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: BLOB
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "6"
      insert_value: "2000-01-01 12:00:70"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

# Bug#594873 - transaction log incorrectly records NULL INSERT into an ENUM as the first permissible value
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (a INT NOT NULL, b ENUM ('1','2'), PRIMARY KEY(a));
INSERT INTO t1 VALUES (1,NULL);
We check how the NULL was recorded
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: ENUM
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;
DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;
#Bug#594876 - transaction log not diffentiating NULL values and empty string for char columns
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (a INT NOT NULL, b CHAR(1000), PRIMARY KEY (a));
INSERT INTO t1 VALUES (1,NULL);
We check how the NULL was recorded in the log 
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: VARCHAR
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: ""
      is_null: false
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;
INSERT INTO t1 VALUES (2,"");
We check how the empty string was recorded in the log 
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: VARCHAR
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: ""
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;
DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;
**** BEGIN LARGE DATA TYPE TESTS ****
Testing Large DECIMAL1 
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (a INT NOT NULL AUTO_INCREMENT, b DECIMAL(65,00), PRIMARY KEY(a));
INSERT INTO t1 (b) VALUES (99999999999999999999999999999999999999999999999999999999999999999);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DECIMAL
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "99999999999999999999999999999999999999999999999999999999999999999"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Testing MAX DECIMAL + 1
INSERT INTO t1 (b) VALUES (999999999999999999999999999999999999999999999999999999999999999990);
ERROR 22003: Out of range value for column 'b' at row 1
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DECIMAL
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "99999999999999999999999999999999999999999999999999999999999999999"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

SELECT * FROM t1;
a	b
1	99999999999999999999999999999999999999999999999999999999999999999
DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;
Testing Large DECIMAL2 
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (a INT NOT NULL AUTO_INCREMENT, b DECIMAL(65,30), PRIMARY KEY(a));
INSERT INTO t1 (b) VALUES (999999999999999);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DECIMAL
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "999999999999999.000000000000000000000000000000"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

INSERT INTO t1 (b) VALUES (99999999999999999999999999999999999.999999999999999999999999999999);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DECIMAL
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "99999999999999999999999999999999999.999999999999999999999999999999"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

Too long value
INSERT INTO t1 (b) VALUES (99999999999999999999999999999999999.9999999999999999999999999999991);
ERROR 01000: Data truncated for column 'b' at row 1
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: DECIMAL
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "99999999999999999999999999999999999.999999999999999999999999999999"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

SELECT * FROM t1;
a	b
1	999999999999999.000000000000000000000000000000
2	99999999999999999999999999999999999.999999999999999999999999999999
DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;
Testing Large VARCHAR1 
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (a INT NOT NULL AUTO_INCREMENT, b VARCHAR(1024), PRIMARY KEY(a));
INSERT INTO t1 (b) VALUES (999999999999999);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: VARCHAR
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "999999999999999"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

INSERT INTO t1 (b) VALUES ("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz");
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: VARCHAR
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "2"
      insert_value: "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

INSERT INTO t1 (b) VALUES ("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"),("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"),("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"),("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"),("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz");
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: VARCHAR
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "3"
      insert_value: "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "4"
      insert_value: "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "5"
      insert_value: "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "6"
      insert_value: "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "7"
      insert_value: "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;
