Testing simple CREATE
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(a INT NOT NULL, PRIMARY KEY(a));
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing multi-column CREATE
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(a INT NOT NULL, b CHAR, c BLOB, d TEXT, e DATE NOT NULL, f BLOB NOT NULL, PRIMARY KEY(a));
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: VARCHAR
        options {
          default_null: true
        }
        string_options {
          length: 1
          collation_id: 45
          collation: "utf8_general_ci"
        }
      }
      field {
        name: "c"
        type: BLOB
        options {
          default_null: true
        }
        string_options {
          collation_id: 63
          collation: "binary"
        }
      }
      field {
        name: "d"
        type: BLOB
        options {
          default_null: true
        }
        string_options {
          collation_id: 45
          collation: "utf8_general_ci"
        }
      }
      field {
        name: "e"
        type: DATE
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "f"
        type: BLOB
        constraints {
          is_notnull: true
        }
        string_options {
          collation_id: 63
          collation: "binary"
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing CREATE with DEFAULT VALUES
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(a INT NOT NULL, b CHAR(25) NOT NULL DEFAULT 'this_is_a_default_value', PRIMARY KEY(a));
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: VARCHAR
        options {
          default_value: "this_is_a_default_value"
        }
        constraints {
          is_notnull: true
        }
        string_options {
          length: 25
          collation_id: 45
          collation: "utf8_general_ci"
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing CREATE with multi-part key 
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(a INT NOT NULL, b CHAR(25) NOT NULL DEFAULT 'this_is_a_default_value', c DATE, d TIMESTAMP, PRIMARY KEY(a,b,d));
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: VARCHAR
        options {
          default_value: "this_is_a_default_value"
        }
        constraints {
          is_notnull: true
        }
        string_options {
          length: 25
          collation_id: 45
          collation: "utf8_general_ci"
        }
      }
      field {
        name: "c"
        type: DATE
        options {
          default_null: true
        }
      }
      field {
        name: "d"
        type: EPOCH
        constraints {
          is_notnull: true
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 112
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        index_part {
          fieldnr: 1
          compare_length: 25
        }
        index_part {
          fieldnr: 3
          compare_length: 8
        }
        options {
          binary_pack_key: true
          var_length_key: true
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing CREATE with partial key
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(a INT NOT NULL, b CHAR(25) NOT NULL DEFAULT 'this_is_a_default_value', c DATE, d TIMESTAMP, PRIMARY KEY(b(5)));
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: VARCHAR
        options {
          default_value: "this_is_a_default_value"
        }
        constraints {
          is_notnull: true
        }
        string_options {
          length: 25
          collation_id: 45
          collation: "utf8_general_ci"
        }
      }
      field {
        name: "c"
        type: DATE
        options {
          default_null: true
        }
      }
      field {
        name: "d"
        type: EPOCH
        options {
          default_null: true
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 20
        index_part {
          fieldnr: 1
          compare_length: 5
        }
        options {
          binary_pack_key: true
          var_length_key: true
          has_partial_segments: true
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing CREATE with multiple keys
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(a INT NOT NULL, b CHAR(25) NOT NULL DEFAULT 'this_is_a_default_value', c DATE, d TIMESTAMP, PRIMARY KEY(b(5)), KEY composite_key(a,b(10),c));
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: VARCHAR
        options {
          default_value: "this_is_a_default_value"
        }
        constraints {
          is_notnull: true
        }
        string_options {
          length: 25
          collation_id: 45
          collation: "utf8_general_ci"
        }
      }
      field {
        name: "c"
        type: DATE
        options {
          default_null: true
        }
      }
      field {
        name: "d"
        type: EPOCH
        options {
          default_null: true
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 20
        index_part {
          fieldnr: 1
          compare_length: 5
        }
        options {
          binary_pack_key: true
          var_length_key: true
          has_partial_segments: true
        }
      }
      indexes {
        name: "composite_key"
        is_primary: false
        is_unique: false
        type: UNKNOWN_INDEX
        key_length: 48
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        index_part {
          fieldnr: 1
          compare_length: 10
        }
        index_part {
          fieldnr: 2
          compare_length: 4
        }
        options {
          binary_pack_key: true
          var_length_key: true
          null_part_key: true
          has_partial_segments: true
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing CREATE with UNIQUE key
DROP TABLE IF EXISTS t1;
CREATE TABLE t1(a INT NOT NULL, b CHAR(25) NOT NULL DEFAULT 'this_is_a_default_value', c DATE, d TIMESTAMP, PRIMARY KEY(a), UNIQUE KEY unique_key(a,b(20),c));
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: VARCHAR
        options {
          default_value: "this_is_a_default_value"
        }
        constraints {
          is_notnull: true
        }
        string_options {
          length: 25
          collation_id: 45
          collation: "utf8_general_ci"
        }
      }
      field {
        name: "c"
        type: DATE
        options {
          default_null: true
        }
      }
      field {
        name: "d"
        type: EPOCH
        options {
          default_null: true
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      indexes {
        name: "unique_key"
        is_primary: false
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 88
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        index_part {
          fieldnr: 1
          compare_length: 20
        }
        index_part {
          fieldnr: 2
          compare_length: 4
        }
        options {
          binary_pack_key: true
          var_length_key: true
          null_part_key: true
          has_partial_segments: true
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing CREATE IF NOT EXISTS 
DROP TABLE IF EXISTS t1;
positive test (should pass)
CREATE TABLE IF NOT EXISTS t1(a INT NOT NULL, PRIMARY KEY(a));
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

negative test (should not be created / logged)
CREATE TABLE IF NOT EXISTS t1(b CHAR(100) NOT NULL, PRIMARY KEY(b));
Warnings:
Note	1050	Table 't1' already exists
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing Foreign Key constraints 
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      indexes {
        name: "b_key1"
        is_primary: false
        is_unique: false
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 1
          compare_length: 4
        }
        options {
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

CREATE TABLE t2(a INT NOT NULL, b INT , PRIMARY KEY(a), KEY b_key (b), 
CONSTRAINT fk_constraint_t2 FOREIGN KEY (b) REFERENCES t1(b) ON DELETE SET NULL ON UPDATE CASCADE);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t2"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: INTEGER
        options {
          default_null: true
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      indexes {
        name: "b_key"
        is_primary: false
        is_unique: false
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 1
          compare_length: 4
        }
        options {
          null_part_key: true
        }
      }
      type: STANDARD
      schema: "test"
      fk_constraint {
        name: "fk_constraint_t2"
        column_names: "b"
        references_table_name: "t1"
        references_columns: "b"
        match: MATCH_UNDEFINED
        update_option: OPTION_CASCADE
        delete_option: OPTION_SET_NULL
      }
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t2;
DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing CREATE TABLE...LIKE 
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      indexes {
        name: "b_key1"
        is_primary: false
        is_unique: false
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 1
          compare_length: 4
        }
        options {
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

CREATE TABLE t2 LIKE t1;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t2"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      indexes {
        name: "b_key1"
        is_primary: false
        is_unique: false
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 1
          compare_length: 4
        }
        options {
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t2;
DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing collations - column 
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL, b CHAR(1000) NOT NULL COLLATE utf8_turkish_ci, c CHAR(10), PRIMARY KEY(a), KEY b_key1 (b));
Warnings:
Warning	1071	Specified key was too long; max key length is 1023 bytes
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: VARCHAR
        constraints {
          is_notnull: true
        }
        string_options {
          length: 1000
          collation_id: 233
          collation: "utf8_turkish_ci"
        }
      }
      field {
        name: "c"
        type: VARCHAR
        options {
          default_null: true
        }
        string_options {
          length: 10
          collation_id: 45
          collation: "utf8_general_ci"
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      indexes {
        name: "b_key1"
        is_primary: false
        is_unique: false
        type: UNKNOWN_INDEX
        key_length: 1020
        index_part {
          fieldnr: 1
          compare_length: 255
        }
        options {
          binary_pack_key: true
          var_length_key: true
          has_partial_segments: true
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing collations - table 
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL, b CHAR(1000) NOT NULL , c CHAR(1) COLLATE utf8_bin, PRIMARY KEY(a)) COLLATE utf8_turkish_ci;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: VARCHAR
        constraints {
          is_notnull: true
        }
        string_options {
          length: 1000
          collation_id: 233
          collation: "utf8_turkish_ci"
        }
      }
      field {
        name: "c"
        type: VARCHAR
        options {
          default_null: true
        }
        string_options {
          length: 1
          collation_id: 46
          collation: "utf8_bin"
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_turkish_ci"
        collation_id: 233
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing charset - column 
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL, b BLOB NOT NULL, c CHAR(1) DEFAULT '0', PRIMARY KEY(a));
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: BLOB
        constraints {
          is_notnull: true
        }
        string_options {
          collation_id: 63
          collation: "binary"
        }
      }
      field {
        name: "c"
        type: VARCHAR
        options {
          default_value: "0"
        }
        string_options {
          length: 1
          collation_id: 45
          collation: "utf8_general_ci"
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing CREATE data-type / fields
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (
autoinc_int_field INT NOT NULL AUTO_INCREMENT
, null_int_field INT NULL
, not_null_bigint_field BIGINT NOT NULL
, null_bigint_field BIGINT NULL
, not_null_int_field INT NOT NULL
, null_varchar_field VARCHAR(100) NULL
, not_null_varchar_field VARCHAR(100) NOT NULL
, null_enum_field ENUM ('val1', 'val2') NULL
, not_null_enum_field ENUM ('val1', 'val2') NOT NULL
, null_date_field DATE NULL
, not_null_date_field DATE NOT NULL
, null_datetime_field DATETIME NULL
, not_null_datetime_field DATETIME NOT NULL
, null_blob_field BLOB NULL
, not_null_blob_field BLOB NOT NULL
, null_text_field TEXT NULL
, not_null_text_field TEXT NOT NULL
, null_timestamp_field TIMESTAMP NULL
, not_null_timestamp_field TIMESTAMP NOT NULL
, null_double_field DOUBLE NULL
, not_null_double_field DOUBLE NOT NULL
, null_decimal_field DECIMAL(10,2) NULL
, not_null_decimal_field DECIMAL(10,2) NOT NULL
, PRIMARY KEY (autoinc_int_field)
);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "autoinc_int_field"
        type: INTEGER
        constraints {
          is_notnull: true
        }
        numeric_options {
          is_autoincrement: true
        }
      }
      field {
        name: "null_int_field"
        type: INTEGER
        options {
          default_null: true
        }
      }
      field {
        name: "not_null_bigint_field"
        type: BIGINT
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "null_bigint_field"
        type: BIGINT
        options {
          default_null: true
        }
      }
      field {
        name: "not_null_int_field"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "null_varchar_field"
        type: VARCHAR
        options {
          default_null: true
        }
        string_options {
          length: 100
          collation_id: 45
          collation: "utf8_general_ci"
        }
      }
      field {
        name: "not_null_varchar_field"
        type: VARCHAR
        constraints {
          is_notnull: true
        }
        string_options {
          length: 100
          collation_id: 45
          collation: "utf8_general_ci"
        }
      }
      field {
        name: "null_enum_field"
        type: ENUM
        options {
          default_null: true
        }
        enumeration_values {
          collation_id: 45
          collation: "utf8_general_ci"
          field_value: "val1"
          field_value: "val2"
        }
      }
      field {
        name: "not_null_enum_field"
        type: ENUM
        constraints {
          is_notnull: true
        }
        enumeration_values {
          collation_id: 45
          collation: "utf8_general_ci"
          field_value: "val1"
          field_value: "val2"
        }
      }
      field {
        name: "null_date_field"
        type: DATE
        options {
          default_null: true
        }
      }
      field {
        name: "not_null_date_field"
        type: DATE
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "null_datetime_field"
        type: DATETIME
        options {
          default_null: true
        }
      }
      field {
        name: "not_null_datetime_field"
        type: DATETIME
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "null_blob_field"
        type: BLOB
        options {
          default_null: true
        }
        string_options {
          collation_id: 63
          collation: "binary"
        }
      }
      field {
        name: "not_null_blob_field"
        type: BLOB
        constraints {
          is_notnull: true
        }
        string_options {
          collation_id: 63
          collation: "binary"
        }
      }
      field {
        name: "null_text_field"
        type: BLOB
        options {
          default_null: true
        }
        string_options {
          collation_id: 45
          collation: "utf8_general_ci"
        }
      }
      field {
        name: "not_null_text_field"
        type: BLOB
        constraints {
          is_notnull: true
        }
        string_options {
          collation_id: 45
          collation: "utf8_general_ci"
        }
      }
      field {
        name: "null_timestamp_field"
        type: EPOCH
        options {
          default_null: true
        }
      }
      field {
        name: "not_null_timestamp_field"
        type: EPOCH
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "null_double_field"
        type: DOUBLE
        options {
          default_null: true
        }
      }
      field {
        name: "not_null_double_field"
        type: DOUBLE
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "null_decimal_field"
        type: DECIMAL
        options {
          default_null: true
        }
        numeric_options {
          scale: 2
          precision: 10
        }
      }
      field {
        name: "not_null_decimal_field"
        type: DECIMAL
        constraints {
          is_notnull: true
        }
        numeric_options {
          scale: 2
          precision: 10
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing index generation 
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (
id INT NOT NULL AUTO_INCREMENT PRIMARY KEY
, key1 VARCHAR(10) NOT NULL
, key2 DOUBLE NOT NULL
, key3 BLOB NOT NULL
, UNIQUE KEY (key1)
, KEY named_key (key2)
, KEY partial_key (key3(30))
);
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "id"
        type: INTEGER
        constraints {
          is_notnull: true
        }
        numeric_options {
          is_autoincrement: true
        }
      }
      field {
        name: "key1"
        type: VARCHAR
        constraints {
          is_notnull: true
        }
        string_options {
          length: 10
          collation_id: 45
          collation: "utf8_general_ci"
        }
      }
      field {
        name: "key2"
        type: DOUBLE
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "key3"
        type: BLOB
        constraints {
          is_notnull: true
        }
        string_options {
          collation_id: 63
          collation: "binary"
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      indexes {
        name: "key1"
        is_primary: false
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 40
        index_part {
          fieldnr: 1
          compare_length: 10
        }
        options {
          binary_pack_key: true
          var_length_key: true
        }
      }
      indexes {
        name: "named_key"
        is_primary: false
        is_unique: false
        type: UNKNOWN_INDEX
        key_length: 8
        index_part {
          fieldnr: 2
          compare_length: 8
        }
        options {
        }
      }
      indexes {
        name: "partial_key"
        is_primary: false
        is_unique: false
        type: UNKNOWN_INDEX
        key_length: 30
        index_part {
          fieldnr: 3
          compare_length: 30
        }
        options {
          binary_pack_key: true
          var_length_key: true
          has_partial_segments: true
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

