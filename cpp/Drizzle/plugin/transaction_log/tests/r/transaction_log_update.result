Testing UPDATE basic 
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
INSERT INTO t1 (b) VALUES (10),(20),(30),(40),(50),(60);
UPDATE t1 SET b=b*10;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "1"
      after_value: "100"
      is_null: false
    }
    record {
      key_value: "2"
      after_value: "200"
      is_null: false
    }
    record {
      key_value: "3"
      after_value: "300"
      is_null: false
    }
    record {
      key_value: "4"
      after_value: "400"
      is_null: false
    }
    record {
      key_value: "5"
      after_value: "500"
      is_null: false
    }
    record {
      key_value: "6"
      after_value: "600"
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing multi-column UPDATE1 
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, c CHAR(100), PRIMARY KEY(a));
INSERT INTO t1 (b,c) VALUES (10,'a'),(20,'b'),(30,'c'),(40,'d'),(50,'e'),(60,'f');
UPDATE t1 SET b=b*10, c=CONCAT(c,'new_value');
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
    set_field_metadata {
      type: VARCHAR
      name: "c"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "1"
      after_value: "100"
      after_value: "anew_value"
      is_null: false
      is_null: false
    }
    record {
      key_value: "2"
      after_value: "200"
      after_value: "bnew_value"
      is_null: false
      is_null: false
    }
    record {
      key_value: "3"
      after_value: "300"
      after_value: "cnew_value"
      is_null: false
      is_null: false
    }
    record {
      key_value: "4"
      after_value: "400"
      after_value: "dnew_value"
      is_null: false
      is_null: false
    }
    record {
      key_value: "5"
      after_value: "500"
      after_value: "enew_value"
      is_null: false
      is_null: false
    }
    record {
      key_value: "6"
      after_value: "600"
      after_value: "fnew_value"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing multi-column UPDATE2
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, c CHAR(100), d CHAR(20), PRIMARY KEY(a));
INSERT INTO t1 (b,c,d) VALUES (10,'a','f'),(20,'b','e'),(30,'c','d'),(40,'d','c'),(50,'e','b'),(60,'f','a');
UPDATE t1 SET d=CONCAT(c,'new_value'), b=b*10;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
    set_field_metadata {
      type: VARCHAR
      name: "d"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "1"
      after_value: "100"
      after_value: "anew_value"
      is_null: false
      is_null: false
    }
    record {
      key_value: "2"
      after_value: "200"
      after_value: "bnew_value"
      is_null: false
      is_null: false
    }
    record {
      key_value: "3"
      after_value: "300"
      after_value: "cnew_value"
      is_null: false
      is_null: false
    }
    record {
      key_value: "4"
      after_value: "400"
      after_value: "dnew_value"
      is_null: false
      is_null: false
    }
    record {
      key_value: "5"
      after_value: "500"
      after_value: "enew_value"
      is_null: false
      is_null: false
    }
    record {
      key_value: "6"
      after_value: "600"
      after_value: "fnew_value"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing simple UPDATE with WHERE 
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, c CHAR(100), PRIMARY KEY(a));
INSERT INTO t1 (b,c) VALUES (10,'a'),(20,'b'),(30,'c'),(40,'d'),(50,'e'),(60,'f');
UPDATE t1 SET b=b*10, c=CONCAT(c,'new_value') WHERE a%2=0 ;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
    set_field_metadata {
      type: VARCHAR
      name: "c"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
      after_value: "200"
      after_value: "bnew_value"
      is_null: false
      is_null: false
    }
    record {
      key_value: "4"
      after_value: "400"
      after_value: "dnew_value"
      is_null: false
      is_null: false
    }
    record {
      key_value: "6"
      after_value: "600"
      after_value: "fnew_value"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing simple UPDATE with WHERE + LIMIT
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, c CHAR(100), PRIMARY KEY(a));
INSERT INTO t1 (b,c) VALUES (10,'a'),(20,'b'),(30,'c'),(40,'d'),(50,'e'),(60,'f');
UPDATE t1 SET b=b*10, c=CONCAT(c,'new_value') WHERE a%2=0 LIMIT 1;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
    set_field_metadata {
      type: VARCHAR
      name: "c"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
      after_value: "200"
      after_value: "bnew_value"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing simple UPDATE with WHERE + LIMIT + ORDER BY1 
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, c CHAR(100), PRIMARY KEY(a));
INSERT INTO t1 (b,c) VALUES (10,'a'),(20,'b'),(30,'c'),(40,'d'),(50,'e'),(60,'f');
UPDATE t1 SET b=b*10, c=CONCAT(c,'new_value') WHERE a%2=0 ORDER BY a DESC LIMIT 1;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
    set_field_metadata {
      type: VARCHAR
      name: "c"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "6"
      after_value: "600"
      after_value: "fnew_value"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing simple UPDATE with WHERE + LIMIT + ORDER BY2
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, c CHAR(100), PRIMARY KEY(a));
INSERT INTO t1 (b,c) VALUES (10,'a'),(20,'b'),(30,'c'),(40,'d'),(50,'e'),(60,'f');
UPDATE t1 SET b=b*10, c=CONCAT(c,'new_value') WHERE a%2=0 ORDER BY a DESC LIMIT 10000;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
    set_field_metadata {
      type: VARCHAR
      name: "c"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "6"
      after_value: "600"
      after_value: "fnew_value"
      is_null: false
      is_null: false
    }
    record {
      key_value: "4"
      after_value: "400"
      after_value: "dnew_value"
      is_null: false
      is_null: false
    }
    record {
      key_value: "2"
      after_value: "200"
      after_value: "bnew_value"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing UPDATE - Foreign Key constraints CASCADE
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2(a INT NOT NULL AUTO_INCREMENT, b INT , PRIMARY KEY(a), KEY b_key (b),
CONSTRAINT fk_constraint_t2 FOREIGN KEY (b) REFERENCES t1(b) ON DELETE SET NULL ON UPDATE CASCADE);
INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
INSERT INTO t2 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
UPDATE t1 SET b = b*10 WHERE b%2=0;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
5

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
5
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
      after_value: "20"
      is_null: false
    }
    record {
      key_value: "4"
      after_value: "40"
      is_null: false
    }
    record {
      key_value: "6"
      after_value: "60"
      is_null: false
    }
    record {
      key_value: "8"
      after_value: "80"
      is_null: false
    }
    record {
      key_value: "10"
      after_value: "100"
      is_null: false
    }
    record {
      key_value: "11"
      after_value: "1000"
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t2;
DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing UPDATE - Foreign Key constraints SET NULL 
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2(a INT NOT NULL AUTO_INCREMENT, b INT , PRIMARY KEY(a), KEY b_key (b),
CONSTRAINT fk_constraint_t2 FOREIGN KEY (b) REFERENCES t1(b) ON DELETE SET NULL ON UPDATE SET NULL);
INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
INSERT INTO t2 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
UPDATE t1 SET b = b*10 WHERE b%2=0;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
5

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
5
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
      after_value: "20"
      is_null: false
    }
    record {
      key_value: "4"
      after_value: "40"
      is_null: false
    }
    record {
      key_value: "6"
      after_value: "60"
      is_null: false
    }
    record {
      key_value: "8"
      after_value: "80"
      is_null: false
    }
    record {
      key_value: "10"
      after_value: "100"
      is_null: false
    }
    record {
      key_value: "11"
      after_value: "1000"
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

SELECT * FROM t2;
a	b
1	1
2	NULL
3	3
4	NULL
5	5
6	NULL
7	7
8	NULL
9	9
10	NULL
11	NULL
12	101
DROP TABLE t2;
DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing UPDATE - Foreign Key constraints RESTRICT 
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2(a INT NOT NULL AUTO_INCREMENT, b INT , PRIMARY KEY(a), KEY b_key (b),
CONSTRAINT fk_constraint_t2 FOREIGN KEY (b) REFERENCES t1(b) ON DELETE SET NULL ON UPDATE RESTRICT);
INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
INSERT INTO t2 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
UPDATE t1 SET b = b*10 WHERE b%2=0;
ERROR 23000: Cannot delete or update a parent row: a foreign key constraint fails (`test`.`t2`, CONSTRAINT `fk_constraint_t2` FOREIGN KEY (`b`) REFERENCES `t1` (`b`) ON DELETE SET NULL)
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t2"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "1"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "2"
      insert_value: "2"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "3"
      insert_value: "3"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "4"
      insert_value: "4"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "5"
      insert_value: "5"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "6"
      insert_value: "6"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "7"
      insert_value: "7"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "8"
      insert_value: "8"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "9"
      insert_value: "9"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "10"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "11"
      insert_value: "100"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "12"
      insert_value: "101"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t2;
DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing no UPDATE 
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a));
INSERT INTO t1 (b) VALUES (10),(20),(30),(40),(50),(60);
UPDATE t1 SET b=10 WHERE a=1;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "2"
      insert_value: "20"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "3"
      insert_value: "30"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "4"
      insert_value: "40"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "5"
      insert_value: "50"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "6"
      insert_value: "60"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing UPDATE ALL 
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a));
INSERT INTO t1 (b) VALUES (10),(20),(30),(40),(50),(60);
UPDATE t1 SET b=1000;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "1"
      after_value: "1000"
      is_null: false
    }
    record {
      key_value: "2"
      after_value: "1000"
      is_null: false
    }
    record {
      key_value: "3"
      after_value: "1000"
      is_null: false
    }
    record {
      key_value: "4"
      after_value: "1000"
      is_null: false
    }
    record {
      key_value: "5"
      after_value: "1000"
      is_null: false
    }
    record {
      key_value: "6"
      after_value: "1000"
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing UPDATE LP Bug#440141 
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1 (
id int AUTO_INCREMENT NOT NULL PRIMARY KEY
, name varchar(1024)
, alias varchar(1024)
);
INSERT INTO t1 (name,alias) VALUES ("jeff lebowski","dude");
UPDATE t1 SET alias = "the dude" WHERE alias = "dude";
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "id"
    }
    set_field_metadata {
      type: VARCHAR
      name: "alias"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "1"
      after_value: "the dude"
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing UPDATE LP Bug#480710
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (
id INT NOT NULL
, padding VARCHAR(200) NOT NULL
, PRIMARY KEY (id)
);
INSERT INTO t1 VALUES (1, "I love testing.");
INSERT INTO t1 VALUES (2, "I hate testing.");
UPDATE t1 SET id = 4 WHERE id = 2;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "id"
    }
    set_field_metadata {
      type: INTEGER
      name: "id"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
      after_value: "4"
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing UPDATE LP Bug#644529
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (
id INT NOT NULL
, col0_int INT DEFAULT NULL
, col1_int INT DEFAULT NULL
, PRIMARY KEY (id)
);
INSERT INTO t1 VALUES (1, NULL, 1);
UPDATE t1 SET col0_int= 0 WHERE col1_int != 2;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "id"
    }
    set_field_metadata {
      type: INTEGER
      name: "col0_int"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "1"
      after_value: "0"
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

UPDATE t1 SET col0_int= NULL WHERE col1_int != 2;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "id"
    }
    set_field_metadata {
      type: INTEGER
      name: "col0_int"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "1"
      after_value: ""
      is_null: true
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing UPDATE LP Bug#655352
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (
id INT NOT NULL
, col0_int INT DEFAULT NULL
, col1_int INT DEFAULT NULL
, col2_int INT DEFAULT NULL
, col3_int INT DEFAULT NULL
, col4_int INT DEFAULT NULL
, PRIMARY KEY (id)
);
INSERT INTO t1 VALUES (1, 2, 3, 4, 5, 6);
INSERT INTO t1 VALUES (2, 20, 30, 40, 50, 60);
START TRANSACTION;
UPDATE t1 SET col0_int = 20 WHERE id = 1;
UPDATE t1 SET col1_int = 300 WHERE id = 2;
COMMIT;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "id"
    }
    set_field_metadata {
      type: INTEGER
      name: "col0_int"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "1"
      after_value: "20"
      is_null: false
    }
  }
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "id"
    }
    set_field_metadata {
      type: INTEGER
      name: "col1_int"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
      after_value: "300"
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

START TRANSACTION;
UPDATE t1 SET col0_int = 20000,  col1_int = 30,  col2_int = 40 where id = 1;
UPDATE t1 SET  col0_int = 2000,  col1_int = 3000  where id = 2;
COMMIT;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
5

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
5
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "id"
    }
    set_field_metadata {
      type: INTEGER
      name: "col0_int"
    }
    set_field_metadata {
      type: INTEGER
      name: "col1_int"
    }
    set_field_metadata {
      type: INTEGER
      name: "col2_int"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "1"
      after_value: "20000"
      after_value: "30"
      after_value: "40"
      is_null: false
      is_null: false
      is_null: false
    }
  }
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "id"
    }
    set_field_metadata {
      type: INTEGER
      name: "col0_int"
    }
    set_field_metadata {
      type: INTEGER
      name: "col1_int"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
      after_value: "2000"
      after_value: "3000"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

START TRANSACTION;
UPDATE t1 SET col0_int = 200000, col1_int = 300 where id = 1;
UPDATE t1 SET col0_int = 20000, col1_int = 30000, col2_int = 400 where id = 2;
COMMIT;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
6

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
6
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "id"
    }
    set_field_metadata {
      type: INTEGER
      name: "col0_int"
    }
    set_field_metadata {
      type: INTEGER
      name: "col1_int"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "1"
      after_value: "200000"
      after_value: "300"
      is_null: false
      is_null: false
    }
  }
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "id"
    }
    set_field_metadata {
      type: INTEGER
      name: "col0_int"
    }
    set_field_metadata {
      type: INTEGER
      name: "col1_int"
    }
    set_field_metadata {
      type: INTEGER
      name: "col2_int"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
      after_value: "20000"
      after_value: "30000"
      after_value: "400"
      is_null: false
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

