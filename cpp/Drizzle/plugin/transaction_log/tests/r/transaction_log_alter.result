Testing RENAME table - positive 
DROP TABLE IF EXISTS t1, t1_new_name;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
ALTER TABLE t1 RENAME TO t1_new_name;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t1 RENAME TO t1_new_name"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1_new_name;
SET GLOBAL transaction_log_truncate_debug= true;

Testing RENAME table - negative 
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2 LIKE t1;
ALTER TABLE t1 RENAME TO t2;
ERROR 42S01: Table 'test.t2' already exists
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t2"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      indexes {
        name: "b_key1"
        is_primary: false
        is_unique: false
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 1
          compare_length: 4
        }
        options {
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1, t2;
SET GLOBAL transaction_log_truncate_debug= true;

Testing RENAME table - negative
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2 LIKE t1;
ALTER TABLE t1 RENAME TO t2;
ERROR 42S01: Table 'test.t2' already exists
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t2"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      indexes {
        name: "b_key1"
        is_primary: false
        is_unique: false
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 1
          compare_length: 4
        }
        options {
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1, t2;
SET GLOBAL transaction_log_truncate_debug= true;

Testing RENAME Table with Foreign Key constraints 
DROP TABLE IF EXISTS t1, t2, t1_new_name ;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2(a INT NOT NULL, b INT , PRIMARY KEY(a), KEY b_key (b), 
CONSTRAINT fk_constraint_t2 FOREIGN KEY (b) REFERENCES t1(b) ON DELETE SET NULL ON UPDATE CASCADE);
ALTER TABLE t1 RENAME to t1_new_name;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t1 RENAME to t1_new_name"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

SHOW CREATE TABLE t2;
Table	Create Table
t2	CREATE TABLE `t2` (
  `a` INT NOT NULL,
  `b` INT DEFAULT NULL,
  PRIMARY KEY (`a`),
  KEY `b_key` (`b`),
  CONSTRAINT `fk_constraint_t2` FOREIGN KEY (`b`) REFERENCES `t1` (`b`) ON UPDATE CASCADE ON DELETE SET NULL
) ENGINE=InnoDB COLLATE = utf8_general_ci
DROP TABLE t2, t1_new_name;
SET GLOBAL transaction_log_truncate_debug= true;

Testing ADD COLUMN simple 
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, PRIMARY KEY(a));
ALTER TABLE t1 ADD COLUMN c CHAR(100) NOT NULL;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t1 ADD COLUMN c CHAR(100) NOT NULL"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing ADD COLUMN simple negative
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, PRIMARY KEY(a));
ALTER TABLE t1 ADD COLUMN b CHAR(100) NOT NULL;
ERROR 42S21: Duplicate column name 'b'
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing ADD COLUMN AFTER <col_name>
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, PRIMARY KEY(a));
ALTER TABLE t1 ADD COLUMN c CHAR(100) NOT NULL AFTER a;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t1 ADD COLUMN c CHAR(100) NOT NULL AFTER a"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing ADD COLUMN FIRST 
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, PRIMARY KEY(a));
ALTER TABLE t1 ADD COLUMN c CHAR(100) NOT NULL FIRST ;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t1 ADD COLUMN c CHAR(100) NOT NULL FIRST"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing ADD COLUMN multiple columns 
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, PRIMARY KEY(a));
ALTER TABLE t1 ADD COLUMN c CHAR(100) NOT NULL FIRST, ADD COLUMN d BLOB AFTER a ;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t1 ADD COLUMN c CHAR(100) NOT NULL FIRST, ADD COLUMN d BLOB AFTER a"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing DROP COLUMN simple 
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, PRIMARY KEY(a));
ALTER TABLE t1 DROP COLUMN b ;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t1 DROP COLUMN b"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing DROP COLUMN multiple columns 
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, c BLOB, d DATE, PRIMARY KEY(a));
ALTER TABLE t1 DROP COLUMN b, DROP COLUMN d ;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t1 DROP COLUMN b, DROP COLUMN d"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing DROP COLUMN negative 
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, PRIMARY KEY(a));
ALTER TABLE t1 DROP COLUMN a, DROP COLUMN b ;
ERROR 42000: You can't delete all columns with ALTER TABLE; use DROP TABLE instead
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing DISABLE/ENABLE KEYS 
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, PRIMARY KEY(a), KEY b_key (b,a));
ALTER TABLE t1 DISABLE KEYS ;
Warnings:
Note	1031	Table storage engine for 't1' doesn't have this option
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t1 DISABLE KEYS"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

ALTER TABLE t1 ENABLE KEYS ;
Warnings:
Note	1031	Table storage engine for 't1' doesn't have this option
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t1 ENABLE KEYS"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing ADD / DROP INDEX
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, PRIMARY KEY(a));
ALTER TABLE t1 ADD INDEX b_key (b,a) ;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t1 ADD INDEX b_key (b,a)"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

ALTER TABLE t1 DROP INDEX b_key;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t1 DROP INDEX b_key"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing ADD / DROP INDEX2
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL, b CHAR(50) NOT NULL, PRIMARY KEY(a));
ALTER TABLE t1 ADD INDEX b_key (b(10),a) ;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t1 ADD INDEX b_key (b(10),a)"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

ALTER TABLE t1 DROP INDEX b_key;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t1 DROP INDEX b_key"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing ADD INDEX negative
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, PRIMARY KEY(a), KEY b_key(b));
ALTER TABLE t1 ADD INDEX b_key (b,a) ;
ERROR 42000: Duplicate key name 'b_key'
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      indexes {
        name: "b_key"
        is_primary: false
        is_unique: false
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 1
          compare_length: 4
        }
        options {
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing DROP INDEX negative1 
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, PRIMARY KEY(a));
ALTER TABLE t1 DROP INDEX i_dont_exist ;
ERROR 42000: Can't DROP 'i_dont_exist'; check that column/key exists
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing ALTER COLUMN 
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, PRIMARY KEY(a));
ALTER TABLE t1 ALTER COLUMN b SET DEFAULT 999 ;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t1 ALTER COLUMN b SET DEFAULT 999"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` INT NOT NULL,
  `b` INT NOT NULL DEFAULT '999',
  PRIMARY KEY (`a`)
) ENGINE=InnoDB COLLATE = utf8_general_ci
ALTER TABLE t1 ALTER COLUMN b DROP DEFAULT ;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t1 ALTER COLUMN b DROP DEFAULT"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` INT NOT NULL,
  `b` INT NOT NULL,
  PRIMARY KEY (`a`)
) ENGINE=InnoDB COLLATE = utf8_general_ci
DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing CHANGE COLUMN  
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, PRIMARY KEY(a));
ALTER TABLE t1 CHANGE COLUMN b new_b_name CHAR(500) DEFAULT 'I am not an int now' FIRST ;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t1 CHANGE COLUMN b new_b_name CHAR(500) DEFAULT \'I am not an int now\' FIRST"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `new_b_name` VARCHAR(500) COLLATE utf8_general_ci DEFAULT 'I am not an int now',
  `a` INT NOT NULL,
  PRIMARY KEY (`a`)
) ENGINE=InnoDB COLLATE = utf8_general_ci
DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing MODIFY COLUMN1
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, c DATE, PRIMARY KEY(a));
ALTER TABLE t1 MODIFY COLUMN b CHAR(50) DEFAULT 'I am now a CHAR field' AFTER c ;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t1 MODIFY COLUMN b CHAR(50) DEFAULT \'I am now a CHAR field\' AFTER c"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` INT NOT NULL,
  `c` DATE DEFAULT NULL,
  `b` VARCHAR(50) COLLATE utf8_general_ci DEFAULT 'I am now a CHAR field',
  PRIMARY KEY (`a`)
) ENGINE=InnoDB COLLATE = utf8_general_ci
DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing MODIFY COLUMN2
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, c DATE, PRIMARY KEY(a));
ALTER TABLE t1 MODIFY COLUMN b CHAR(50) DEFAULT 'I am now a CHAR field' AFTER b ;
ERROR 42S22: Unknown column 'b' in 't1'
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "c"
        type: DATE
        options {
          default_null: true
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` INT NOT NULL,
  `b` INT NOT NULL,
  `c` DATE DEFAULT NULL,
  PRIMARY KEY (`a`)
) ENGINE=InnoDB COLLATE = utf8_general_ci
DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing MODIFY COLUMN3
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, c DATE, PRIMARY KEY(a));
ALTER TABLE t1 MODIFY COLUMN b INT NOT NULL ;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t1 MODIFY COLUMN b INT NOT NULL"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

SHOW CREATE TABLE t1;
Table	Create Table
t1	CREATE TABLE `t1` (
  `a` INT NOT NULL,
  `b` INT NOT NULL,
  `c` DATE DEFAULT NULL,
  PRIMARY KEY (`a`)
) ENGINE=InnoDB COLLATE = utf8_general_ci
DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing ADD/DROP Foreign Key constraints 
DROP TABLE IF EXISTS t1, t2;
CREATE TABLE t1(a INT NOT NULL, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
1

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
1
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t1"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      field {
        name: "b"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      indexes {
        name: "b_key1"
        is_primary: false
        is_unique: false
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 1
          compare_length: 4
        }
        options {
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

CREATE TABLE t2(a INT NOT NULL, b INT , PRIMARY KEY(a), KEY b_key (b));
ALTER TABLE t2 ADD CONSTRAINT fk_constraint_t2 FOREIGN KEY(b) REFERENCES t1(b) ON DELETE SET NULL ON UPDATE CASCADE;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t2 ADD CONSTRAINT fk_constraint_t2 FOREIGN KEY(b) REFERENCES t1(b) ON DELETE SET NULL ON UPDATE CASCADE"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

ALTER TABLE t2 DROP FOREIGN KEY fk_constraint_t2 ;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: RAW_SQL
  START_TIMESTAMP
  END_TIMESTAMP
  sql: "ALTER TABLE t2 DROP FOREIGN KEY fk_constraint_t2"
  raw_sql_schema: "test"
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t2;
DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

