SET @OLD_AUTO_COMMIT = @@AUTOCOMMIT;
SET AUTOCOMMIT = 0;
Testing simple transaction 
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
START TRANSACTION;
INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
UPDATE t1 SET b = b*10 WHERE b%2=0;
UPDATE t1 SET b = b/10 WHERE b%2=0;
COMMIT;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "1"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "2"
      insert_value: "2"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "3"
      insert_value: "3"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "4"
      insert_value: "4"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "5"
      insert_value: "5"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "6"
      insert_value: "6"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "7"
      insert_value: "7"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "8"
      insert_value: "8"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "9"
      insert_value: "9"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "10"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "11"
      insert_value: "100"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "12"
      insert_value: "101"
      is_null: false
      is_null: false
    }
  }
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
      after_value: "20"
      is_null: false
    }
    record {
      key_value: "4"
      after_value: "40"
      is_null: false
    }
    record {
      key_value: "6"
      after_value: "60"
      is_null: false
    }
    record {
      key_value: "8"
      after_value: "80"
      is_null: false
    }
    record {
      key_value: "10"
      after_value: "100"
      is_null: false
    }
    record {
      key_value: "11"
      after_value: "1000"
      is_null: false
    }
  }
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
      after_value: "2"
      is_null: false
    }
    record {
      key_value: "4"
      after_value: "4"
      is_null: false
    }
    record {
      key_value: "6"
      after_value: "6"
      is_null: false
    }
    record {
      key_value: "8"
      after_value: "8"
      is_null: false
    }
    record {
      key_value: "10"
      after_value: "10"
      is_null: false
    }
    record {
      key_value: "11"
      after_value: "100"
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

SET AUTOCOMMIT = @OLD_AUTO_COMMIT;
Testing multi-table transaction
DROP TABLE IF EXISTS t1, t2 ;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2 LIKE t1;
START TRANSACTION;
INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
INSERT INTO t2 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
UPDATE t1 SET b = b*10 WHERE b%2=0;
UPDATE t2 SET b = b/10 WHERE b%2=0;
COMMIT;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "1"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "2"
      insert_value: "2"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "3"
      insert_value: "3"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "4"
      insert_value: "4"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "5"
      insert_value: "5"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "6"
      insert_value: "6"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "7"
      insert_value: "7"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "8"
      insert_value: "8"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "9"
      insert_value: "9"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "10"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "11"
      insert_value: "100"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "12"
      insert_value: "101"
      is_null: false
      is_null: false
    }
  }
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t2"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "1"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "2"
      insert_value: "2"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "3"
      insert_value: "3"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "4"
      insert_value: "4"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "5"
      insert_value: "5"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "6"
      insert_value: "6"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "7"
      insert_value: "7"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "8"
      insert_value: "8"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "9"
      insert_value: "9"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "10"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "11"
      insert_value: "100"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "12"
      insert_value: "101"
      is_null: false
      is_null: false
    }
  }
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
      after_value: "20"
      is_null: false
    }
    record {
      key_value: "4"
      after_value: "40"
      is_null: false
    }
    record {
      key_value: "6"
      after_value: "60"
      is_null: false
    }
    record {
      key_value: "8"
      after_value: "80"
      is_null: false
    }
    record {
      key_value: "10"
      after_value: "100"
      is_null: false
    }
    record {
      key_value: "11"
      after_value: "1000"
      is_null: false
    }
  }
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t2"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
      after_value: "0"
      is_null: false
    }
    record {
      key_value: "4"
      after_value: "0"
      is_null: false
    }
    record {
      key_value: "6"
      after_value: "1"
      is_null: false
    }
    record {
      key_value: "8"
      after_value: "1"
      is_null: false
    }
    record {
      key_value: "10"
      after_value: "1"
      is_null: false
    }
    record {
      key_value: "11"
      after_value: "10"
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1, t2;
SET GLOBAL transaction_log_truncate_debug= true;

Testing transaction log behavior on implicit commit 
DROP TABLE IF EXISTS t1, t2, t3 ;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2 LIKE t1;
START TRANSACTION;
INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
INSERT INTO t2 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
UPDATE t1 SET b = b*10 WHERE b%2=0;
COMMIT;
CREATE TABLE t3 LIKE t1;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: CREATE_TABLE
  START_TIMESTAMP
  END_TIMESTAMP
  create_table_statement {
    table {
      name: "t3"
      engine {
        name: "InnoDB"
      }
      field {
        name: "a"
        type: INTEGER
        constraints {
          is_notnull: true
        }
        numeric_options {
          is_autoincrement: true
        }
      }
      field {
        name: "b"
        type: INTEGER
        constraints {
          is_notnull: true
        }
      }
      indexes {
        name: "PRIMARY"
        is_primary: true
        is_unique: true
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 0
          compare_length: 4
        }
        options {
        }
      }
      indexes {
        name: "b_key1"
        is_primary: false
        is_unique: false
        type: UNKNOWN_INDEX
        key_length: 4
        index_part {
          fieldnr: 1
          compare_length: 4
        }
        options {
        }
      }
      type: STANDARD
      schema: "test"
      options {
        has_user_set_auto_increment_value: false
        collation: "utf8_general_ci"
        collation_id: 45
      }
      CREATE_TIMESTAMP
      UPDATE_TIMESTAMP
      catalog: "LOCAL"
      UUID
      version: 1
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

SELECT * FROM t1;
a	b
1	1
2	20
3	3
4	40
5	5
6	60
7	7
8	80
9	9
10	100
11	1000
12	101
SELECT * FROM t2;
a	b
1	1
2	2
3	3
4	4
5	5
6	6
7	7
8	8
9	9
10	10
11	100
12	101
DROP TABLE t1, t2, t3;
SET GLOBAL transaction_log_truncate_debug= true;

Testing failing transaction
DROP TABLE IF EXISTS t1 ;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
START TRANSACTION;
INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
UPDATE t1 SET b = b*10 WHERE b%2=0;
INSERT INTO t1 (b) VALUES ('this_will_fail');
ERROR HY000: Incorrect integer value: 'this_will_fail' for column 'b' at row 1
COMMIT;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
2

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
2
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "1"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "2"
      insert_value: "2"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "3"
      insert_value: "3"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "4"
      insert_value: "4"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "5"
      insert_value: "5"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "6"
      insert_value: "6"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "7"
      insert_value: "7"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "8"
      insert_value: "8"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "9"
      insert_value: "9"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "10"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "11"
      insert_value: "100"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "12"
      insert_value: "101"
      is_null: false
      is_null: false
    }
  }
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
      after_value: "20"
      is_null: false
    }
    record {
      key_value: "4"
      after_value: "40"
      is_null: false
    }
    record {
      key_value: "6"
      after_value: "60"
      is_null: false
    }
    record {
      key_value: "8"
      after_value: "80"
      is_null: false
    }
    record {
      key_value: "10"
      after_value: "100"
      is_null: false
    }
    record {
      key_value: "11"
      after_value: "1000"
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1;
SET GLOBAL transaction_log_truncate_debug= true;

Testing multi-user transaction1
DROP TABLE IF EXISTS t1, t2 ;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2 LIKE t1;
connection1
start insert on t2 then commit after default connection does some work
START TRANSACTION;
INSERT INTO t2 (b) VALUES (100),(1000),(10),(50);
default connection
INSERT / UPDATE to t1
START TRANSACTION;
INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
UPDATE t1 SET b = b*10 WHERE b%2=0;
COMMIT;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "1"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "2"
      insert_value: "2"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "3"
      insert_value: "3"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "4"
      insert_value: "4"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "5"
      insert_value: "5"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "6"
      insert_value: "6"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "7"
      insert_value: "7"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "8"
      insert_value: "8"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "9"
      insert_value: "9"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "10"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "11"
      insert_value: "100"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "12"
      insert_value: "101"
      is_null: false
      is_null: false
    }
  }
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
      after_value: "20"
      is_null: false
    }
    record {
      key_value: "4"
      after_value: "40"
      is_null: false
    }
    record {
      key_value: "6"
      after_value: "60"
      is_null: false
    }
    record {
      key_value: "8"
      after_value: "80"
      is_null: false
    }
    record {
      key_value: "10"
      after_value: "100"
      is_null: false
    }
    record {
      key_value: "11"
      after_value: "1000"
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

COMMIT;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t2"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "100"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "2"
      insert_value: "1000"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "3"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "4"
      insert_value: "50"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1, t2;
SET GLOBAL transaction_log_truncate_debug= true;

Testing multi-user transaction2 - failing
DROP TABLE IF EXISTS t1, t2 ;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2 LIKE t1;
connection1
start insert on t2 then commit after default connection does some work
START TRANSACTION;
INSERT INTO t2 (b) VALUES (100),(1000),(10),(50),('fail_panda');
ERROR HY000: Incorrect integer value: 'fail_panda' for column 'b' at row 5
default connection
INSERT / UPDATE to t1
START TRANSACTION;
INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
UPDATE t1 SET b = b*10 WHERE b%2=0;
COMMIT;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "1"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "2"
      insert_value: "2"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "3"
      insert_value: "3"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "4"
      insert_value: "4"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "5"
      insert_value: "5"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "6"
      insert_value: "6"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "7"
      insert_value: "7"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "8"
      insert_value: "8"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "9"
      insert_value: "9"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "10"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "11"
      insert_value: "100"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "12"
      insert_value: "101"
      is_null: false
      is_null: false
    }
  }
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
      after_value: "20"
      is_null: false
    }
    record {
      key_value: "4"
      after_value: "40"
      is_null: false
    }
    record {
      key_value: "6"
      after_value: "60"
      is_null: false
    }
    record {
      key_value: "8"
      after_value: "80"
      is_null: false
    }
    record {
      key_value: "10"
      after_value: "100"
      is_null: false
    }
    record {
      key_value: "11"
      after_value: "1000"
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

COMMIT;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "1"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "2"
      insert_value: "2"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "3"
      insert_value: "3"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "4"
      insert_value: "4"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "5"
      insert_value: "5"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "6"
      insert_value: "6"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "7"
      insert_value: "7"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "8"
      insert_value: "8"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "9"
      insert_value: "9"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "10"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "11"
      insert_value: "100"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "12"
      insert_value: "101"
      is_null: false
      is_null: false
    }
  }
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "2"
      after_value: "20"
      is_null: false
    }
    record {
      key_value: "4"
      after_value: "40"
      is_null: false
    }
    record {
      key_value: "6"
      after_value: "60"
      is_null: false
    }
    record {
      key_value: "8"
      after_value: "80"
      is_null: false
    }
    record {
      key_value: "10"
      after_value: "100"
      is_null: false
    }
    record {
      key_value: "11"
      after_value: "1000"
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

DROP TABLE t1, t2;
SET GLOBAL transaction_log_truncate_debug= true;

Testing multi-user transaction3 
DROP TABLE IF EXISTS t1, t2 ;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2 LIKE t1;
connection1
start insert on t2 then commit after default connection does some work
START TRANSACTION;
INSERT INTO t1 (b) VALUES (10),(20),(30),(40),(50),(60),(70),(80),(90),(100),(1000),(1010);
INSERT INTO t2 (b) VALUES (100),(1000),(10),(50);
default connection
INSERT / UPDATE to t1
START TRANSACTION;
INSERT INTO t2 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
UPDATE t1 SET b = b*10 WHERE b%2=0;
COMMIT;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t2"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "5"
      insert_value: "1"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "6"
      insert_value: "2"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "7"
      insert_value: "3"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "8"
      insert_value: "4"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "9"
      insert_value: "5"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "10"
      insert_value: "6"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "11"
      insert_value: "7"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "12"
      insert_value: "8"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "13"
      insert_value: "9"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "14"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "15"
      insert_value: "100"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "16"
      insert_value: "101"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

connection1 - COMMIT work done earlier
COMMIT;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "2"
      insert_value: "20"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "3"
      insert_value: "30"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "4"
      insert_value: "40"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "5"
      insert_value: "50"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "6"
      insert_value: "60"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "7"
      insert_value: "70"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "8"
      insert_value: "80"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "9"
      insert_value: "90"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "10"
      insert_value: "100"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "11"
      insert_value: "1000"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "12"
      insert_value: "1010"
      is_null: false
      is_null: false
    }
  }
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t2"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "100"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "2"
      insert_value: "1000"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "3"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "4"
      insert_value: "50"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

SELECT * FROM t1;
a	b
1	10
2	20
3	30
4	40
5	50
6	60
7	70
8	80
9	90
10	100
11	1000
12	1010
SELECT * FROM t2;
a	b
1	100
2	1000
3	10
4	50
5	1
6	2
7	3
8	4
9	5
10	6
11	7
12	8
13	9
14	10
15	100
16	101
DROP TABLE t1, t2;
SET GLOBAL transaction_log_truncate_debug= true;

Testing multi-user transaction4 rollback 
DROP TABLE IF EXISTS t1, t2 ;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2 LIKE t1;
connection1
start insert on t2 then commit after default connection does some work
START TRANSACTION;
INSERT INTO t1 (b) VALUES (10),(20),(30),(40),(50),(60),(70),(80),(90),(100),(1000),(1010);
INSERT INTO t2 (b) VALUES (100),(1000),(10),(50);
default connection
INSERT / UPDATE to t1
START TRANSACTION;
INSERT INTO t2 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
UPDATE t1 SET b = b*10 WHERE b%2=0;
COMMIT;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t2"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "5"
      insert_value: "1"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "6"
      insert_value: "2"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "7"
      insert_value: "3"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "8"
      insert_value: "4"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "9"
      insert_value: "5"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "10"
      insert_value: "6"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "11"
      insert_value: "7"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "12"
      insert_value: "8"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "13"
      insert_value: "9"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "14"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "15"
      insert_value: "100"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "16"
      insert_value: "101"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

connection con1 - ROLLBACK earlier INSERTs
ROLLBACK;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t2"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "5"
      insert_value: "1"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "6"
      insert_value: "2"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "7"
      insert_value: "3"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "8"
      insert_value: "4"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "9"
      insert_value: "5"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "10"
      insert_value: "6"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "11"
      insert_value: "7"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "12"
      insert_value: "8"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "13"
      insert_value: "9"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "14"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "15"
      insert_value: "100"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "16"
      insert_value: "101"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

SELECT * FROM t1;
a	b
SELECT * FROM t2;
a	b
5	1
6	2
7	3
8	4
9	5
10	6
11	7
12	8
13	9
14	10
15	100
16	101
DROP TABLE t1, t2;
SET GLOBAL transaction_log_truncate_debug= true;

Testing multi-user transaction5 rollback
DROP TABLE IF EXISTS t1, t2 ;
CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2 LIKE t1;
connection1
start insert on t2 then commit after default connection does some work
START TRANSACTION;
INSERT INTO t1 (b) VALUES (10),(20),(30),(40),(50),(60),(70),(80),(90),(100),(1000),(1010);
INSERT INTO t2 (b) VALUES (100),(1000),(10),(50);
default connection
INSERT / UPDATE to t1
START TRANSACTION;
INSERT INTO t2 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
UPDATE t2 SET b = b*10 WHERE a%2=0;
INSERT INTO t1 (b) VALUES (10),(15);
COMMIT;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
3

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
3
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t2"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "5"
      insert_value: "1"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "6"
      insert_value: "2"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "7"
      insert_value: "3"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "8"
      insert_value: "4"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "9"
      insert_value: "5"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "10"
      insert_value: "6"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "11"
      insert_value: "7"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "12"
      insert_value: "8"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "13"
      insert_value: "9"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "14"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "15"
      insert_value: "100"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "16"
      insert_value: "101"
      is_null: false
      is_null: false
    }
  }
}
statement {
  type: UPDATE
  START_TIMESTAMP
  END_TIMESTAMP
  update_header {
    table_metadata {
      schema_name: "test"
      table_name: "t2"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
    set_field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  update_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "6"
      after_value: "20"
      is_null: false
    }
    record {
      key_value: "8"
      after_value: "40"
      is_null: false
    }
    record {
      key_value: "10"
      after_value: "60"
      is_null: false
    }
    record {
      key_value: "12"
      after_value: "80"
      is_null: false
    }
    record {
      key_value: "14"
      after_value: "100"
      is_null: false
    }
    record {
      key_value: "16"
      after_value: "1010"
      is_null: false
    }
  }
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "13"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "14"
      insert_value: "15"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

connection con1 
DELETE FROM t2 WHERE b%10=0 ;
INSERT INTO t1 (b) VALUES (10),(15);
COMMIT;
Check transaction_log_entries
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_ENTRIES;
COUNT(*)
4

Check transaction_log_transactions
SELECT COUNT(*) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
COUNT(*)
4
Check transaction log contents
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS));
PRINT_TRANSACTION_MESSAGE('transaction.log',(select max(entry_offset) from DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS))
transaction_context {
  server_id: 1
  TRANSACTION_ID
  START_TIMESTAMP
  END_TIMESTAMP
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "2"
      insert_value: "20"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "3"
      insert_value: "30"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "4"
      insert_value: "40"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "5"
      insert_value: "50"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "6"
      insert_value: "60"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "7"
      insert_value: "70"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "8"
      insert_value: "80"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "9"
      insert_value: "90"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "10"
      insert_value: "100"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "11"
      insert_value: "1000"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "12"
      insert_value: "1010"
      is_null: false
      is_null: false
    }
  }
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t2"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "1"
      insert_value: "100"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "2"
      insert_value: "1000"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "3"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "4"
      insert_value: "50"
      is_null: false
      is_null: false
    }
  }
}
statement {
  type: DELETE
  START_TIMESTAMP
  END_TIMESTAMP
  delete_header {
    table_metadata {
      schema_name: "test"
      table_name: "t2"
    }
    key_field_metadata {
      type: INTEGER
      name: "a"
    }
  }
  delete_data {
    segment_id: 1
    end_segment: true
    record {
      key_value: "1"
    }
    record {
      key_value: "2"
    }
    record {
      key_value: "3"
    }
    record {
      key_value: "4"
    }
    record {
      key_value: "6"
    }
    record {
      key_value: "8"
    }
    record {
      key_value: "10"
    }
    record {
      key_value: "12"
    }
    record {
      key_value: "14"
    }
    record {
      key_value: "15"
    }
    record {
      key_value: "16"
    }
  }
}
statement {
  type: INSERT
  START_TIMESTAMP
  END_TIMESTAMP
  insert_header {
    table_metadata {
      schema_name: "test"
      table_name: "t1"
    }
    field_metadata {
      type: INTEGER
      name: "a"
    }
    field_metadata {
      type: INTEGER
      name: "b"
    }
  }
  insert_data {
    segment_id: 1
    end_segment: true
    record {
      insert_value: "15"
      insert_value: "10"
      is_null: false
      is_null: false
    }
    record {
      insert_value: "16"
      insert_value: "15"
      is_null: false
      is_null: false
    }
  }
}
segment_id: 1
end_segment: true


COMMIT;

SELECT * FROM t1;
a	b
1	10
2	20
3	30
4	40
5	50
6	60
7	70
8	80
9	90
10	100
11	1000
12	1010
13	10
14	15
15	10
16	15
SELECT * FROM t2;
a	b
5	1
7	3
9	5
11	7
13	9
DROP TABLE t1, t2;
SET GLOBAL transaction_log_truncate_debug= true;

SET AUTOCOMMIT = @OLD_AUTO_COMMIT;
