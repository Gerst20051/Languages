# transaction_log_transaction.test
# test of various multi-statement transactions
# and how they are captured in the transaction_log

# Ignore startup/shutdown events
--disable_query_log
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--enable_query_log


# capture current auto_commit value
SET @OLD_AUTO_COMMIT = @@AUTOCOMMIT;
SET AUTOCOMMIT = 0;

--echo Testing simple transaction 
--disable_warnings
DROP TABLE IF EXISTS t1 ;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));

START TRANSACTION;
INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);

UPDATE t1 SET b = b*10 WHERE b%2=0;
UPDATE t1 SET b = b/10 WHERE b%2=0;
COMMIT;

--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

DROP TABLE t1;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

# Cleanup
# Set auto_commit to value we had at start of test
SET AUTOCOMMIT = @OLD_AUTO_COMMIT;

--echo Testing multi-table transaction
--disable_warnings
DROP TABLE IF EXISTS t1, t2 ;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2 LIKE t1;

START TRANSACTION;
INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
INSERT INTO t2 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);


UPDATE t1 SET b = b*10 WHERE b%2=0;
UPDATE t2 SET b = b/10 WHERE b%2=0;
COMMIT;

--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

DROP TABLE t1, t2;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing transaction log behavior on implicit commit 
--disable_warnings
DROP TABLE IF EXISTS t1, t2, t3 ;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2 LIKE t1;

START TRANSACTION;
INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
INSERT INTO t2 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
UPDATE t1 SET b = b*10 WHERE b%2=0;
COMMIT;
CREATE TABLE t3 LIKE t1;

--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

SELECT * FROM t1;
SELECT * FROM t2;

DROP TABLE t1, t2, t3;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing failing transaction
--disable_warnings
DROP TABLE IF EXISTS t1 ;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));

START TRANSACTION;
INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);

UPDATE t1 SET b = b*10 WHERE b%2=0;
--ERROR ER_TRUNCATED_WRONG_VALUE_FOR_FIELD
INSERT INTO t1 (b) VALUES ('this_will_fail');
COMMIT;

--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

DROP TABLE t1;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing multi-user transaction1
--disable_warnings
DROP TABLE IF EXISTS t1, t2 ;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2 LIKE t1;

connect (con1, localhost,root,,test);
connection con1;
--echo connection1
--echo start insert on t2 then commit after default connection does some work
START TRANSACTION;
INSERT INTO t2 (b) VALUES (100),(1000),(10),(50);

connection default;
--echo default connection
--echo INSERT / UPDATE to t1
START TRANSACTION;
INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
UPDATE t1 SET b = b*10 WHERE b%2=0;
COMMIT;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

connection con1;
COMMIT;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo
connection default;
disconnect con1;
--sleep 1.0

DROP TABLE t1, t2;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing multi-user transaction2 - failing
--disable_warnings
DROP TABLE IF EXISTS t1, t2 ;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2 LIKE t1;

connect (con1, localhost,root,,test);
connection con1;
--echo connection1
--echo start insert on t2 then commit after default connection does some work
START TRANSACTION;
--ERROR ER_TRUNCATED_WRONG_VALUE_FOR_FIELD
INSERT INTO t2 (b) VALUES (100),(1000),(10),(50),('fail_panda');

connection default;
--echo default connection
--echo INSERT / UPDATE to t1
START TRANSACTION;
INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
UPDATE t1 SET b = b*10 WHERE b%2=0;
COMMIT;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

connection con1;
COMMIT;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo
connection default;
disconnect con1;
--sleep 1.0

DROP TABLE t1, t2;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing multi-user transaction3 
--disable_warnings
DROP TABLE IF EXISTS t1, t2 ;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2 LIKE t1;

connect (con1, localhost,root,,test);
connection con1;
--echo connection1
--echo start insert on t2 then commit after default connection does some work
START TRANSACTION;
INSERT INTO t1 (b) VALUES (10),(20),(30),(40),(50),(60),(70),(80),(90),(100),(1000),(1010);
INSERT INTO t2 (b) VALUES (100),(1000),(10),(50);

connection default;
--echo default connection
--echo INSERT / UPDATE to t1
START TRANSACTION;
INSERT INTO t2 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
UPDATE t1 SET b = b*10 WHERE b%2=0;
COMMIT;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

connection con1;
--echo connection1 - COMMIT work done earlier
COMMIT;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo
connection default;
disconnect con1;
--sleep 1.0

SELECT * FROM t1;
SELECT * FROM t2;

DROP TABLE t1, t2;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing multi-user transaction4 rollback 
--disable_warnings
DROP TABLE IF EXISTS t1, t2 ;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2 LIKE t1;

connect (con1, localhost,root,,test);
connection con1;
--echo connection1
--echo start insert on t2 then commit after default connection does some work
START TRANSACTION;
INSERT INTO t1 (b) VALUES (10),(20),(30),(40),(50),(60),(70),(80),(90),(100),(1000),(1010);
INSERT INTO t2 (b) VALUES (100),(1000),(10),(50);

connection default;
--echo default connection
--echo INSERT / UPDATE to t1
START TRANSACTION;
INSERT INTO t2 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
UPDATE t1 SET b = b*10 WHERE b%2=0;
COMMIT;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

connection con1;
--echo connection con1 - ROLLBACK earlier INSERTs
ROLLBACK;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo
connection default;
disconnect con1;
--sleep 1.0

SELECT * FROM t1;
SELECT * FROM t2;


DROP TABLE t1, t2;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing multi-user transaction5 rollback
--disable_warnings
DROP TABLE IF EXISTS t1, t2 ;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));
CREATE TABLE t2 LIKE t1;

connect (con1, localhost,root,,test);
connection con1;
--echo connection1
--echo start insert on t2 then commit after default connection does some work
START TRANSACTION;
INSERT INTO t1 (b) VALUES (10),(20),(30),(40),(50),(60),(70),(80),(90),(100),(1000),(1010);
INSERT INTO t2 (b) VALUES (100),(1000),(10),(50);

connection default;
--echo default connection
--echo INSERT / UPDATE to t1
START TRANSACTION;
INSERT INTO t2 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);
UPDATE t2 SET b = b*10 WHERE a%2=0;
INSERT INTO t1 (b) VALUES (10),(15);
COMMIT;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

connection con1;
--echo connection con1 
DELETE FROM t2 WHERE b%10=0 ;
INSERT INTO t1 (b) VALUES (10),(15);
COMMIT;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo
connection default;
disconnect con1;
--sleep 1.0

SELECT * FROM t1;
SELECT * FROM t2;


DROP TABLE t1, t2;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

#########################################################
# Cleanup
# Set auto_commit to value we had at start of test
SET AUTOCOMMIT = @OLD_AUTO_COMMIT;
#########################################################
