# transaction_log_drop
# Test of DROP TABLE statements and how the transaction log
# captures / represents them

# Ignore startup/shutdown events
--disable_query_log
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--enable_query_log


--echo Testing simple DROP 
--disable_warnings
DROP TABLE IF EXISTS t1;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL, PRIMARY KEY(a));

DROP TABLE t1;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing multi-table DROP
--disable_warnings
DROP TABLE IF EXISTS t1, t2, t3;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL, PRIMARY KEY(a));

CREATE TABLE t2 LIKE t1;

CREATE TABLE t3 LIKE t2;

DROP TABLE t1, t2, t3;
# The transaction log treats the above DROP as 3 
# separate transactions.  We check the last three 
# transactions from the log
# NOTE: We use replace_regex to handle variable timestamps in the log

--replace_regex /start_timestamp: [0-9]+/START_TIMESTAMP/g /end_timestamp: [0-9]+/END_TIMESTAMP/g /creation_timestamp: [0-9]+/CREATE_TIMESTAMP/ /update_timestamp: [0-9]+/UPDATE_TIMESTAMP/ /transaction_id: [0-9]+/TRANSACTION_ID/
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log', entry_offset) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS ORDER BY TRANSACTION_ID DESC LIMIT 3;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing DROP IF EXISTS positive
--disable_warnings
DROP TABLE IF EXISTS t1;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL, PRIMARY KEY(a));

DROP TABLE IF EXISTS t1;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Bug#674471
--echo DROP SCHEMA/TABLE IF EXISTS being logged even if the object didn't exist  
DROP TABLE IF EXISTS t1;

--replace_regex /start_timestamp: [0-9]+/START_TIMESTAMP/g /end_timestamp: [0-9]+/END_TIMESTAMP/g /creation_timestamp: [0-9]+/CREATE_TIMESTAMP/ /update_timestamp: [0-9]+/UPDATE_TIMESTAMP/ /transaction_id: [0-9]+/TRANSACTION_ID/
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log', entry_offset) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
--echo

DROP SCHEMA IF EXISTS t1;
--replace_regex /start_timestamp: [0-9]+/START_TIMESTAMP/g /end_timestamp: [0-9]+/END_TIMESTAMP/g /creation_timestamp: [0-9]+/CREATE_TIMESTAMP/ /update_timestamp: [0-9]+/UPDATE_TIMESTAMP/ /transaction_id: [0-9]+/TRANSACTION_ID/
SELECT PRINT_TRANSACTION_MESSAGE('transaction.log', entry_offset) FROM DATA_DICTIONARY.TRANSACTION_LOG_TRANSACTIONS;
--echo

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo
