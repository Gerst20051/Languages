# transaction_log_update
# test of various UPDATE statements and
# how the transaction_log captures the relevant data

# Ignore startup/shutdown events
--disable_query_log
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--enable_query_log



--echo Testing UPDATE basic 
--disable_warnings
DROP TABLE IF EXISTS t1, t2;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));

INSERT INTO t1 (b) VALUES (10),(20),(30),(40),(50),(60);


UPDATE t1 SET b=b*10;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

DROP TABLE t1;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing multi-column UPDATE1 
--disable_warnings
DROP TABLE IF EXISTS t1, t2;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, c CHAR(100), PRIMARY KEY(a));

INSERT INTO t1 (b,c) VALUES (10,'a'),(20,'b'),(30,'c'),(40,'d'),(50,'e'),(60,'f');

UPDATE t1 SET b=b*10, c=CONCAT(c,'new_value');
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

DROP TABLE t1;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing multi-column UPDATE2
--disable_warnings
DROP TABLE IF EXISTS t1, t2;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, c CHAR(100), d CHAR(20), PRIMARY KEY(a));

INSERT INTO t1 (b,c,d) VALUES (10,'a','f'),(20,'b','e'),(30,'c','d'),(40,'d','c'),(50,'e','b'),(60,'f','a');

UPDATE t1 SET d=CONCAT(c,'new_value'), b=b*10;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

DROP TABLE t1;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing simple UPDATE with WHERE 
--disable_warnings
DROP TABLE IF EXISTS t1, t2;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, c CHAR(100), PRIMARY KEY(a));

INSERT INTO t1 (b,c) VALUES (10,'a'),(20,'b'),(30,'c'),(40,'d'),(50,'e'),(60,'f');

UPDATE t1 SET b=b*10, c=CONCAT(c,'new_value') WHERE a%2=0 ;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

DROP TABLE t1;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing simple UPDATE with WHERE + LIMIT
--disable_warnings
DROP TABLE IF EXISTS t1, t2;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, c CHAR(100), PRIMARY KEY(a));

INSERT INTO t1 (b,c) VALUES (10,'a'),(20,'b'),(30,'c'),(40,'d'),(50,'e'),(60,'f');

UPDATE t1 SET b=b*10, c=CONCAT(c,'new_value') WHERE a%2=0 LIMIT 1;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

DROP TABLE t1;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing simple UPDATE with WHERE + LIMIT + ORDER BY1 
--disable_warnings
DROP TABLE IF EXISTS t1, t2;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, c CHAR(100), PRIMARY KEY(a));

INSERT INTO t1 (b,c) VALUES (10,'a'),(20,'b'),(30,'c'),(40,'d'),(50,'e'),(60,'f');

UPDATE t1 SET b=b*10, c=CONCAT(c,'new_value') WHERE a%2=0 ORDER BY a DESC LIMIT 1;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

DROP TABLE t1;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing simple UPDATE with WHERE + LIMIT + ORDER BY2
--disable_warnings
DROP TABLE IF EXISTS t1, t2;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, c CHAR(100), PRIMARY KEY(a));

INSERT INTO t1 (b,c) VALUES (10,'a'),(20,'b'),(30,'c'),(40,'d'),(50,'e'),(60,'f');

UPDATE t1 SET b=b*10, c=CONCAT(c,'new_value') WHERE a%2=0 ORDER BY a DESC LIMIT 10000;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

DROP TABLE t1;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing UPDATE - Foreign Key constraints CASCADE
--disable_warnings
DROP TABLE IF EXISTS t1, t2;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));

CREATE TABLE t2(a INT NOT NULL AUTO_INCREMENT, b INT , PRIMARY KEY(a), KEY b_key (b),
CONSTRAINT fk_constraint_t2 FOREIGN KEY (b) REFERENCES t1(b) ON DELETE SET NULL ON UPDATE CASCADE);

INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);

INSERT INTO t2 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);

UPDATE t1 SET b = b*10 WHERE b%2=0;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

DROP TABLE t2;

DROP TABLE t1;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing UPDATE - Foreign Key constraints SET NULL 
--disable_warnings
DROP TABLE IF EXISTS t1, t2;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));

CREATE TABLE t2(a INT NOT NULL AUTO_INCREMENT, b INT , PRIMARY KEY(a), KEY b_key (b),
CONSTRAINT fk_constraint_t2 FOREIGN KEY (b) REFERENCES t1(b) ON DELETE SET NULL ON UPDATE SET NULL);

INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);

INSERT INTO t2 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);

UPDATE t1 SET b = b*10 WHERE b%2=0;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

SELECT * FROM t2;

DROP TABLE t2;

DROP TABLE t1;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing UPDATE - Foreign Key constraints RESTRICT 
--disable_warnings
DROP TABLE IF EXISTS t1, t2;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a), KEY b_key1 (b));

CREATE TABLE t2(a INT NOT NULL AUTO_INCREMENT, b INT , PRIMARY KEY(a), KEY b_key (b),
CONSTRAINT fk_constraint_t2 FOREIGN KEY (b) REFERENCES t1(b) ON DELETE SET NULL ON UPDATE RESTRICT);

INSERT INTO t1 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);

INSERT INTO t2 (b) VALUES (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(100),(101);

--ERROR ER_ROW_IS_REFERENCED_2
UPDATE t1 SET b = b*10 WHERE b%2=0;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

DROP TABLE t2;

DROP TABLE t1;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing no UPDATE 
--disable_warnings
DROP TABLE IF EXISTS t1 ;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a));

INSERT INTO t1 (b) VALUES (10),(20),(30),(40),(50),(60);

UPDATE t1 SET b=10 WHERE a=1;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

DROP TABLE t1;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo


--echo Testing UPDATE ALL 
--disable_warnings
DROP TABLE IF EXISTS t1, t2;
--enable_warnings

CREATE TABLE t1(a INT NOT NULL AUTO_INCREMENT, b INT NOT NULL, PRIMARY KEY(a));

INSERT INTO t1 (b) VALUES (10),(20),(30),(40),(50),(60);

UPDATE t1 SET b=1000;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

DROP TABLE t1;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing UPDATE LP Bug#440141 
# Replication generates incorrect update commands when 
# where clause uses a field contained in set clause

--disable_warnings
DROP TABLE IF EXISTS t1, t2;
--enable_warnings

CREATE TABLE t1 (
  id int AUTO_INCREMENT NOT NULL PRIMARY KEY
, name varchar(1024)
, alias varchar(1024)
);

INSERT INTO t1 (name,alias) VALUES ("jeff lebowski","dude");

UPDATE t1 SET alias = "the dude" WHERE alias = "dude";
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

DROP TABLE t1;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing UPDATE LP Bug#480710
# UPDATE a PK value 

--disable_warnings
DROP TABLE IF EXISTS t1;
--enable_warnings

CREATE TABLE t1 (
  id INT NOT NULL
, padding VARCHAR(200) NOT NULL
, PRIMARY KEY (id)
);

INSERT INTO t1 VALUES (1, "I love testing.");
INSERT INTO t1 VALUES (2, "I hate testing.");

UPDATE t1 SET id = 4 WHERE id = 2;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

DROP TABLE t1;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing UPDATE LP Bug#644529
--disable_warnings
DROP TABLE IF EXISTS t1;
--enable_warnings

CREATE TABLE t1 (
  id INT NOT NULL
, col0_int INT DEFAULT NULL
, col1_int INT DEFAULT NULL
, PRIMARY KEY (id)
);

INSERT INTO t1 VALUES (1, NULL, 1);
UPDATE t1 SET col0_int= 0 WHERE col1_int != 2;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo
UPDATE t1 SET col0_int= NULL WHERE col1_int != 2;    
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

DROP TABLE t1;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo

--echo Testing UPDATE LP Bug#655352
--disable_warnings
DROP TABLE IF EXISTS t1;
--enable_warnings

CREATE TABLE t1 (
  id INT NOT NULL
, col0_int INT DEFAULT NULL
, col1_int INT DEFAULT NULL
, col2_int INT DEFAULT NULL
, col3_int INT DEFAULT NULL
, col4_int INT DEFAULT NULL
, PRIMARY KEY (id)
);

INSERT INTO t1 VALUES (1, 2, 3, 4, 5, 6);
INSERT INTO t1 VALUES (2, 20, 30, 40, 50, 60);

# check that these 2 updates are in different statements
START TRANSACTION;
UPDATE t1 SET col0_int = 20 WHERE id = 1;
UPDATE t1 SET col1_int = 300 WHERE id = 2;
COMMIT;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

# check that these 2 updates are not in the same statement, given the 2nd
# updates columns are a subset of the first updates columns
START TRANSACTION;
UPDATE t1 SET col0_int = 20000,  col1_int = 30,  col2_int = 40 where id = 1;
UPDATE t1 SET  col0_int = 2000,  col1_int = 3000  where id = 2;
COMMIT;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo


#check that these 2 updates are not in the same statement, given the 1st
# updates columns are a subset of the 2nd updates columns
START TRANSACTION;
UPDATE t1 SET col0_int = 200000, col1_int = 300 where id = 1;
UPDATE t1 SET col0_int = 20000, col1_int = 30000, col2_int = 400 where id = 2;
COMMIT;
--source ../plugin/transaction_log/tests/t/check_transaction_log.inc
--echo

DROP TABLE t1;

# Truncate the log file to reset for the next test
--source ../plugin/transaction_log/tests/t/truncate_log.inc
--echo
