#!/usr/bin/env python
#
# Drizzle Client & Protocol Library
# 
# Copyright (C) 2008-2010 Eric Day (eday@oddments.org)
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#
#     * The names of its contributors may not be used to endorse or
# promote products derived from this software without specific prior
# written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
'''
Send an infinite amount of data to a MySQL server.
'''

import optparse
import sys
import socket

parser = optparse.OptionParser(add_help_option=False)

parser.add_option("--help", action="help", help="Print out help details")
parser.add_option("-h", "--host", dest="host", default="localhost",
                  help="Host or IP to test", metavar="HOST")
parser.add_option("-p", "--port", dest="port", default=3306,
                  help="Port to test", metavar="PORT")

(options, args) = parser.parse_args()

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((options.host, int(options.port)))
print 'Connected to %s:%s' % (options.host, options.port)

server_header = s.recv(1024)
print 'Server Header:'
print list(server_header)

print
print 'Each . represents 16MB of data:'

# Max packet size plus sequence number '1'.
packet = '\xFF\xFF\xFF\x01'
data = 'x' * 8192

# Keep sending max size packets, causes infinite loop in my_net_skip_rest.
while True:
  s.send(packet)

  # Send 16777215 bytes.
  for x in range(0, 2047):
    s.send(data)
  s.send(data[1:])

  sys.stdout.write('.')
  sys.stdout.flush()
