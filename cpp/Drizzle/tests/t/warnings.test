#
# Test some warnings
#
--disable_warnings
drop table if exists t1, t2;
--enable_warnings
SET SQL_WARNINGS=1;

create table t1 (a int);
--error ER_TABLE_EXISTS_ERROR
create table t1 (a int);
show count(*) errors;
show errors;
show warnings;
--error ER_PARSE_ERROR
create table t (i);
show count(*) errors;
show errors;
insert into t1 values (1);
--error ER_TRUNCATED_WRONG_VALUE_FOR_FIELD
insert into t1 values ("hej");
--error ER_TRUNCATED_WRONG_VALUE_FOR_FIELD
insert into t1 values ("hej"),("då");
set SQL_WARNINGS=1;
--error ER_TRUNCATED_WRONG_VALUE_FOR_FIELD
insert into t1 values ("hej");
--error ER_TRUNCATED_WRONG_VALUE_FOR_FIELD
insert into t1 values ("hej"),("då");
drop table t1;
set SQL_WARNINGS=0;

#
# Test other warnings
#

drop temporary table if exists not_exists;
drop table if exists not_exists_table;
show warnings limit 1;
drop database if exists not_exists_db;
show count(*) warnings;
create table t1(id int);
create table if not exists t1(id int);
--disable_ps_protocol
select @@warning_count;
--enable_ps_protocol
drop table t1;

#
# Test error for LOAD DATA INFILE
#

create table t1(a int, b int not null, c date, d char(5));
--replace_result $DRIZZLETEST_VARDIR DRIZZLETEST_VARDIR
--error ER_WARN_NULL_TO_NOTNULL
eval load data infile '$DRIZZLETEST_VARDIR/std_data_ln/warnings_loaddata.dat' into table t1 fields terminated by ',';
# PS doesn't work good with @@warning_count
--disable_ps_protocol
select @@warning_count;
--enable_ps_protocol
drop table t1;

#
# Errors and Warnings from basic INSERT, UPDATE and ALTER commands
#

create table t1(a int NOT NULL, b int, c char(5));

# Error data to big for character field
--error ER_DATA_TOO_LONG
insert into t1 values(-1,100,'mysql'),(10,-1,'mysql ab'),(500,256,'open source'),(20,NULL,'test');
insert into t1 values(-1,100,'mysql'),(10,-1,'dri '),(500,256,'zzle'),(20,NULL,'test');

# Error as changing width truncates data
--error ER_WARN_DATA_TRUNCATED  
alter table t1 modify c char(4);
alter table t1 add d char(2);

# Error trying to insert NULL data into NOT NULL field
--error ER_BAD_NULL_ERROR
update t1 set a=NULL where a=10;

# Error data to big for character field
--error ER_DATA_TOO_LONG
update t1 set c='drizzle' where c='test';

# Error data to big for character field
--error ER_DATA_TOO_LONG
update t1 set d=c;

create table t2(a int NOT NULL, b char(3));

# Error data to big for character field
--error ER_DATA_TOO_LONG
insert into t2 select b,c from t1;

# Error 'a' doesn't have a default value
--error ER_NO_DEFAULT_FOR_FIELD
insert into t2(b) values('mysqlab');
insert into t2(a) values(1);

set sql_warnings=1;

# Error data to big for character field
--error ER_DATA_TOO_LONG
insert into t2(a,b) values(1,'mysqlab');
insert into t2(a,b) values(1,'mys');

set sql_warnings=0;
drop table t1, t2;

#
# Test for max_error_count
#

create table t1(a char(10));
let $1=50;
disable_query_log;
begin;
while ($1)
{
  eval insert into t1 values('drizzle ab');
  dec $1;
}
commit;
enable_query_log;
alter table t1 add b char;
set max_error_count=10;

# Error data to big for character field
--error ER_DATA_TOO_LONG
update t1 set b=a;

alter table t1 modify b char(10);
update t1 set b=a;
--disable_ps_protocol
select @@warning_count;
--enable_ps_protocol

# Bug#9072
set max_error_count=0;
show variables like 'max_error_count';
update t1 set b='hi';
--disable_ps_protocol
select @@warning_count;
--enable_ps_protocol
show warnings;
set max_error_count=65535;
show variables like 'max_error_count';
set max_error_count=10;
show variables like 'max_error_count';

drop table t1;

#
# Tests for show errors and warnings limit a, b
#
create table t1 (a int);
insert into t1 (a) values (1), (2), (3), (4), (5), (6), (7), (8), (9), (10);
# Incorrect integer value abc for column a
--error ER_TRUNCATED_WRONG_VALUE_FOR_FIELD
update t1 set a='abc';
show warnings limit 2, 1;
show warnings limit 0, 10;
show warnings limit 9, 1;
show warnings limit 10, 1;
show warnings limit 9, 2;
show warnings limit 0, 0;
show warnings limit 1;
show warnings limit 0;
show warnings limit 1, 0;
# make sure behaviour is consistent with select ... limit
select * from t1 limit 0;
select * from t1 limit 1, 0;
select * from t1 limit 0, 0;
drop table t1;

--echo End of 4.1 tests

create table t1 (c_char char(255), c_varchar varchar(255), c_tinytext blob);
set @c = repeat(' ', 256);
set @q = repeat('q', 256);

# BUG, 309791 currently only gives a warning but should give error
--error ER_DATA_TOO_LONG
insert into t1 values(@c, @c, @c);
show warnings;
--error ER_DATA_TOO_LONG
insert into t1 values(@q, NULL, NULL);
--error ER_DATA_TOO_LONG
insert into t1 values(NULL, @q, NULL);
insert into t1 values(NULL, NULL, @q);

drop table t1;

--echo End of Drizzle tests
