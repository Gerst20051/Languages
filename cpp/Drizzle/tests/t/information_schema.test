# Test for data_dictionary.schemas &
# show databases

--disable_warnings
DROP TABLE IF EXISTS t0,t1,t2,t3,t4,t5;
--enable_warnings

# Test for data_dictionary.tables &
# show tables

create database mysqltest;
create table mysqltest.t1(a int, b VARCHAR(30), KEY string_data (b));
create table test.t2(a int);
create table t3(a int, KEY a_data (a));
create table mysqltest.t4(a int);
create table t5 (id int auto_increment primary key);
insert into t5 values (10);

--sorted_result
select table_name from data_dictionary.tables
where table_schema = "mysqltest" and table_name like "t%";

select * from data_dictionary.indexes where TABLE_SCHEMA = "mysqltest";

show tables like 't%';
--replace_column 1 #  6 # 7 # 8 # 9 # 10 #
show table status;
show columns from t3 like "a%";
--sorted_result
select * from data_dictionary.columns where table_name="t1"
and column_name= "a";

connect (user3,localhost,mysqltest_2,,);
connection user3;
--sorted_result
select table_name, column_name from data_dictionary.columns 
where table_schema = 'mysqltest' and table_name = 't1';
show columns from mysqltest.t1;
connect (user4,localhost,mysqltest_3,,mysqltest);
connection user4;
connection default;

drop tables mysqltest.t4, mysqltest.t1, t2, t3, t5;
drop database mysqltest;

#
# Bug#2719 information_schema: errors in "columns"
#
--sorted_result
select column_type from data_dictionary.columns
where table_schema="data_dictionary" and table_name="COLUMNS" and
(column_name="character_set_name" or column_name="collation_name");

#
# Bug#2718 information_schema: errors in "tables"
#
--replace_column 1 #
--sorted_result
select count(*) from data_dictionary.tables where 
table_schema="data_dictionary" and table_name="COLUMNS";

--replace_column 1 #
--sorted_result
select count(*) from data_dictionary.tables
where table_schema="mysql" and table_name="user";

#
# Bug #7215  information_schema: columns are longtext instead of varchar
# Bug #7217  information_schema: columns are varbinary() instead of timestamp
#
--sorted_result
select table_schema, table_name, column_name from data_dictionary.columns where data_type = 'longtext';
--sorted_result
select table_name, column_name, data_type from data_dictionary.columns where data_type = 'datetime';

#
# Bug #8164  subquery with data_dictionary.COLUMNS, 100 % CPU
#
--sorted_result
SELECT COUNT(*) FROM data_dictionary.tables A
WHERE NOT EXISTS 
(SELECT * FROM data_dictionary.columns B
  WHERE A.TABLE_SCHEMA = B.TABLE_SCHEMA
  AND A.TABLE_NAME = B.TABLE_NAME);

#
# Bug #9344  INFORMATION_SCHEMA, wrong content, numeric columns
#

create table t1
( x_bigint BIGINT,
  x_integer INTEGER,
  x_int int,
  x_decimal DECIMAL(5,3),
  x_numeric NUMERIC(5,3),
  x_real REAL,
  x_float FLOAT,
  x_double_precision DOUBLE PRECISION );
--sorted_result
SELECT COLUMN_NAME, CHARACTER_MAXIMUM_LENGTH, CHARACTER_OCTET_LENGTH
FROM data_dictionary.columns
WHERE TABLE_NAME= 't1';
drop table t1;

#
# Bug #9404  information_schema: Weird error messages
# with SELECT SUM() ... GROUP BY queries
#
--replace_column 2 #
SELECT table_schema, count(*) FROM data_dictionary.tables
WHERE table_name NOT LIKE 'ndb_%' AND 
table_name NOT LIKE 'falcon%'
GROUP BY TABLE_SCHEMA ORDER BY table_schema;

#
# Bug #11057 information_schema: columns table has some questionable contents
# Bug #12301 information_schema: NUMERIC_SCALE must be 0 for integer columns
#
create table t1(f1 LONGBLOB, f2 LONGTEXT);
--sorted_result
select column_name,data_type,CHARACTER_OCTET_LENGTH,
       CHARACTER_MAXIMUM_LENGTH
from data_dictionary.columns
where table_name='t1';
drop table t1;
create table t1(f1 int, f2 int, f3 BIGINT, f4 int,
                f5 BIGINT, f6 int, f7 int);
--sorted_result
select column_name, NUMERIC_PRECISION, NUMERIC_SCALE
from data_dictionary.columns
where table_name='t1';
drop table t1;

#
# Bug#12518 COLUMN_DEFAULT has wrong value if NOT NULL is set
#
create table t1 (a int not null, b int);
--sorted_result
select column_name, column_default from data_dictionary.columns
  where table_schema='test' and table_name='t1';
use test;
show columns from t1;
drop table t1;

#
#
# Bug#14089 FROM list subquery always fails when information_schema is current database
#
use test;
create table t1(id int);
insert into t1(id) values (1);
--sorted_result
select 1 from (select 1 from test.t1) a;
use data_dictionary;
--sorted_result
select 1 from (select 1 from test.t1) a;
use test;
drop table t1;

#
# Bug#14271 I_S: columns has no size for (var)binary columns
#
create table t1(f1 varbinary(32), f2 varbinary(64));
--sorted_result
select character_maximum_length, character_octet_length
from data_dictionary.columns where table_name='t1';
drop table t1;

##
## Bug#15307 GROUP_CONCAT() with ORDER BY returns empty set on information_schema
##
select column_type, group_concat(table_schema, '.', table_name), count(*) as num
from data_dictionary.columns where
table_schema='data_dictionary' and
(column_type = 'varchar(7)' or column_type = 'varchar(20)'
 or column_type = 'varchar(27)')
group by column_type order by column_type, num;

#
# Bug#19236 bad COLUMNS.CHARACTER_MAXIMUM_LENGHT and CHARACTER_OCTET_LENGTH
#
create table t1(f1 char(1) not null, f2 char(9) not null);
--sorted_result
select CHARACTER_MAXIMUM_LENGTH, CHARACTER_OCTET_LENGTH from
data_dictionary.columns where table_schema='test' and table_name = 't1';
drop table t1;

#
# Bug#19599 duplication of information_schema column value in a CONCAT expr with user var
#
set @a:= '.';
create table t1(f1 char(5));
create table t2(f1 char(5));
--sorted_result
select concat(@a, table_name), @a, table_name
from data_dictionary.tables where table_schema = 'test';
drop table t1,t2;

#
# Bug#18925: subqueries with MIN/MAX functions on INFORMARTION_SCHEMA 
#

SELECT t.table_name, c1.column_name
  FROM data_dictionary.tables t
       INNER JOIN
       data_dictionary.columns c1
       ON t.table_schema = c1.table_schema AND
          t.table_name = c1.table_name
  WHERE t.table_schema = 'data_dictionary' AND
        c1.ordinal_position =
        ( SELECT COALESCE(MIN(c2.ordinal_position),1)
            FROM data_dictionary.columns c2
            WHERE c2.table_schema = t.table_schema AND
                  c2.table_name = t.table_name AND
                  c2.column_name LIKE '%SCHEMA%'
        )
  AND t.table_name NOT LIKE 'falcon%'
  ORDER BY t.table_name, c1.column_name;

SELECT t.table_name, c1.column_name
  FROM data_dictionary.tables t
       INNER JOIN
       data_dictionary.columns c1
       ON t.table_schema = c1.table_schema AND
          t.table_name = c1.table_name
  WHERE t.table_schema = 'data_dictionary' AND
        c1.ordinal_position =
        ( SELECT COALESCE(MIN(c2.ordinal_position),1)
            FROM data_dictionary.columns c2
            WHERE c2.table_schema = 'data_dictionary' AND
                  c2.table_name = t.table_name AND
                  c2.column_name LIKE '%SCHEMA%'
        )
  AND t.table_name NOT LIKE 'falcon%'
  ORDER BY t.table_name, c1.column_name;

#
# Bug#21231: query with a simple non-correlated subquery over
#            INFORMARTION_SCHEMA.TABLES 
#

SELECT MAX(table_name) FROM data_dictionary.tables;
SELECT table_name from data_dictionary.tables
  WHERE table_name=(SELECT MAX(table_name)
                      FROM data_dictionary.tables)
  ORDER BY table_name;

# Bug#23299 Some queries against INFORMATION_SCHEMA with subqueries fail
#
create table t1 (f1 int);
create table t2 (f1 int, f2 int);

#select table_name from data_dictionary.tables
#where table_schema = 'test' and table_name not in
#(select table_name from data_dictionary.columns
# where table_schema = 'test' and column_name = 'f3')
#ORDER BY table_name;

drop table t1,t2;


#
# Bug#24630  Subselect query crashes mysqld
#
--sorted_result
select 1 as f1 from data_dictionary.tables  where "CHARACTER_SETS"=
(select cast(table_name as char)  from data_dictionary.tables WHERE TABLE_SCHEMA=schema()
 AND TABLE_NAME = "CHARACTER_SETS"
 order by table_name limit 1) AND TABLE_SCHEMA=schema() limit 1;

select t.table_name, group_concat(t.table_schema, '.', t.table_name),
       count(*) as num1
from data_dictionary.tables t
inner join data_dictionary.columns c1
on t.table_schema = c1.table_schema AND t.table_name = c1.table_name
where t.table_schema = 'data_dictionary' AND
      t.table_name not like 'falcon%' AND
        c1.ordinal_position =
        (select isnull(c2.column_type) -
         isnull(group_concat(c2.table_schema, '.', c2.table_name)) +
         count(*) as num
         from data_dictionary.columns c2 where
         c2.table_schema='data_dictionary' and
         (c2.column_type = 'varchar(7)' or c2.column_type = 'varchar(20)')
          group by c2.column_type order by num limit 1)
group by t.table_name order by num1, t.table_name;

#
# Bug#25859    ALTER DATABASE works w/o parameters
#
--error ER_PARSE_ERROR
alter database;
--error ER_PARSE_ERROR
alter database test;

#
# Bug#27747 database metadata doesn't return sufficient column default info
#
create table t1 (
  f1 varchar(50),
  f2 varchar(50) not null,
  f3 varchar(50) default '',
  f4 varchar(50) default NULL,
  f5 bigint not null,
  f6 bigint not null default 10,
  f7 datetime not null,
  f8 datetime default '2006-01-01'
);
#select column_default from data_dictionary.columns where table_name= 't1' ORDER BY column_default;
show columns from t1;
drop table t1;

SET max_heap_table_size = DEFAULT;
USE test;

--echo End of 5.0 tests.

#
# Bug#30795 Query on data_dictionary.schemas, wrong result
#
--sorted_result
SELECT SCHEMA_NAME FROM data_dictionary.schemas
WHERE SCHEMA_NAME ='data_dictionary';
                                                                                                 
#
# Bug#31381 Error in retrieving Data from INFORMATION_SCHEMA
#
--sorted_result
SELECT TABLE_COLLATION FROM data_dictionary.tables
WHERE TABLE_SCHEMA='mysql' and TABLE_NAME= 'db';

--echo #
--echo # Test that the query is visible to self and others.
--echo #

--sorted_result
SELECT info FROM data_dictionary.processlist WHERE id = CONNECTION_ID();

#
# do a query on the PROCESSLIST table in I_S to ensure it works correctly
#
--sorted_result
SELECT info, command, db
FROM data_dictionary.processlist
WHERE id = CONNECTION_ID();

#
# query TABLES
#
#SELECT table_schema, table_name
#FROM data_dictionary.tables
#WHERE table_schema="data_dictionary"
#ORDER BY table_name;
