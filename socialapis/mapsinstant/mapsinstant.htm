<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Google Maps: From 0 to Instant (v0.4)</title>
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.5/jquery.min.js"></script>
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
<script type="text/javascript" src="ajaxqueue.js"></script>
<style type="text/css">
html {
height: 100%;
}

* {
padding: 0;
margin: 0;
}

body {
height: 100%;
margin: 0px;
padding: 0px;
}

div#header {
padding: 10px;
}

#searchbox {
border-color: #ccc #ccc #999;
border-style: solid;
border-width: 1px;
height: 27px;
width: 400px;
}

#container {
height: 100%;
}

input#search {
border: 0 none;
float: left;
font-size: 138%;
font-size-adjust: none;
font-stretch: normal;
font-style: normal;
font-variant: normal;
font-weight: normal;
height: 25px;
line-height: normal;
vertical-align: top;
width: 100%;
z-index: 1;
padding-top: 2px;
}

#suggestion {
left: 450px;
position: fixed;
float: left;
font-family: arial;
font-size: 11px;
width: 100%;
}

#suggestion2 {
left: 450px;
position: fixed;
float: left;
font-family: arial;
font-size: 11px;
width: 100%;
top: 25px;
}

#container {
font-family: arial;
font-size: 11px;
}

span#container2 {
position: fixed;
top: 4px;
right: 4px;
}

#map_canvas {
height: 100%;
z-index: 0;
}
</style>
</head>
<body onload="initialize();">
<div id="container">
<div id="header">
<div id="searchbox">
<input type="text" value="" autocorrect="off" autocomplete="off" maxlength="2048" tabindex="1" class="q_d_skunk skunkworks-input" title="Search the map" name="q" id="search" style="" />
<span id="suggestion">Enter a location or map directions (Place A to Place B)<br /></span>
<span id="suggestion2">Hint: Press TAB to auto-complete current word!!<br /></span>
<span id="container2">Click here for directions!<br /></span>
</div>
</div>
<div id="map_canvas"></div>
</div>
<script type="text/javascript">
var geocoder,map,suggestion,suggestion2,sugdat,sugdat2,directions,directionDisplay;
var directionsService = new google.maps.DirectionsService();
var markersArray = [];
var DIR1now,DIR1b4,DIR2now,DIR2b4;
var ne,sw,tabkey,regex1;

$('div#map_canvas').height($(window).height() - 49);
$('input#search').live('keydown', function(e) {
	var keyCode = e.keyCode || e.which;
	if (keyCode == 9) {
		e.preventDefault();
		if (suggestion) {
			regex1 = new RegExp("^" + $('input#search').val() + "(.*?)( |$)", "ig");
			tabkey = suggestion.match(regex1);
			$("input#search").val(tabkey);
		}
	}
});

function initialize() {
	directionsDisplay = new google.maps.DirectionsRenderer();
	var myLatlng = new google.maps.LatLng(31.672083,-81.496582);
	var myOptions = {
		zoom: 6,
		center: myLatlng,
		mapTypeId: google.maps.MapTypeId.ROADMAP
	}
	map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
	geocoder = new google.maps.Geocoder();
	directionsDisplay.setMap(map);
	$('input#search').keyup(primaryFunction);
	$('input#search').submit(primaryFunction);
}

function calcRoute() {
	var start = suggestion;
	var end = suggestion2;
	var request = {
		origin:start, 
		destination:end,
		travelMode: google.maps.DirectionsTravelMode.DRIVING
	};
	directionsService.route(request, function(response, status) {
		if (status == google.maps.DirectionsStatus.OK) directionsDisplay.setDirections(response);
	});
}

function primaryFunction() {
	if ($('input#search').val() == "") { updateHTML('suggestion', 'Enter a location or map directions (Place A to Place B)'); updateHTML('suggestion2', 'Hint: Press TAB to auto-complete current word!!'); return false; }
	var searchtext = $('input#search').val();
	directions = null;
	directions = searchtext.match(/ to /ig);
	if (directions) {
		directions = searchtext.split(/ to /ig);
		directions0 = directions[0];
		directions1 = directions[1];
		$.ajax({
			type: "get",
			url: "http://maps-api-ssl.google.com/maps/suggest?hl=en&gl=us&v=2&json=b&auth=4c8b041euWw4-3h2-Ty2fD3D1BKVQqJCEcU&src=1,2&num=5&numps=5&callback=handleResponse&q=" + directions0 + "&cp=" + directions0.length,
			dataType: "script",
			queue: "DIR1",
			cancelExisting: true
		});
		$.ajax({
			type: "get",
			url: "http://maps-api-ssl.google.com/maps/suggest?hl=en&gl=us&v=2&json=b&auth=4c8b041euWw4-3h2-Ty2fD3D1BKVQqJCEcU&src=1,2&num=5&numps=5&callback=handleResponse2&q=" + directions1 + "&cp=" + directions1.length,
			dataType: "script",
			queue: "DIR2",
			cancelExisting: true
		});
	} else {
		$.ajax({
			type: "get",
			url: "http://maps-api-ssl.google.com/maps/suggest?hl=en&gl=us&v=2&json=b&auth=4c8b041euWw4-3h2-Ty2fD3D1BKVQqJCEcU&src=1,2&num=5&numps=5&callback=handleResponse&q=" + $('input#search').val() + "&cp=" + $('input#search').val().length,
			dataType: "script",
			queue: "SUG1",
			cancelExisting: true
		});
	}
}

handleResponse = {};
handleResponse2 = {};
handleResponse = function(sugdat) {
	DIR1b4 = suggestion;
	suggestion = parse(sugdat);
	DIR1now = suggestion;
	if (DIR1b4 != DIR1now) {
		updateHTML('suggestion', suggestion); 
		codeAddress(suggestion);
	}
}

handleResponse2 = function(sugdat2) {
	DIR2b4 = suggestion2;
	suggestion2 = parse(sugdat2);
	DIR2now = suggestion2;
	if (DIR2b4 != DIR2now) {
		updateHTML('suggestion2', suggestion2); 
		codeAddress(suggestion2);
	}
	calcRoute();
};

function updateHTML(elmId, value) {
	document.getElementById(elmId).innerHTML = value;
}

function parse(_sugdat) {
	if (_sugdat["suggestion"][0]["query"]) return _sugdat["suggestion"][0]["query"];
	else return null;
}

function codeAddress(_sug) {
	var address = _sug;
	geocoder.geocode({ 'address': address}, function(results, status) {
		if (status == google.maps.GeocoderStatus.OK) {
			var ne = results[0].geometry.viewport.getNorthEast();
			var sw = results[0].geometry.viewport.getSouthWest();
			map.fitBounds(results[0].geometry.viewport); 
			var boundingBoxPoints = [
				ne, new google.maps.LatLng(ne.lat(), sw.lng()),
				sw, new google.maps.LatLng(sw.lat(), ne.lng()), ne
			];
			var boundingBox = new google.maps.Polyline({
				path: boundingBoxPoints,
				strokeColor: '#f00',
				strokeOpacity: 0,
				strokeWeight: 0
			});
			boundingBox.setMap(map);
			//map.setCenter(results[0].geometry.location);
			deleteOverlays();
			addMarker(results[0].geometry.location);
		}
	});
}

function deleteOverlays() {
	if (markersArray) {
		for (i in markersArray) markersArray[i].setMap(null);
		markersArray.length = 0;
	}
}

function addMarker(location) {
	marker = new google.maps.Marker({	position: location, map: map });
	markersArray.push(marker);
}
</script>
</body>
</html>